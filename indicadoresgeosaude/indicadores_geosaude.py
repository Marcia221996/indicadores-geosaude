# -*- coding: utf-8 -*-
"""
/***************************************************************************
 IndicadoresGeosaude
                                 A QGIS plugin
 Este plugin permite descarregar indicadores do geosaúde, adicionando-os como camadas no QGIS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-06-19
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Márcia Esteves e Sara Oliveira
        email                : ...
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from qgis.core import *
from PyQt5.QtWidgets import QAction, QMenu, QToolButton, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .indicadores_geosaude_dialog import IndicadoresGeosaudeDialog
import os.path


class IndicadoresGeosaude:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'IndicadoresGeosaude_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = IndicadoresGeosaudeDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Indicadores Geosaude')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'IndicadoresGeosaude')
        self.toolbar.setObjectName(u'IndicadoresGeosaude')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('IndicadoresGeosaude', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        self.Menu = QMenu(self.iface.mainWindow())
        self.Menu1 = self.Menu.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'),'Plano Nacional de Saúde - Revisão e Extensão a 2020')
        self.Menu2 = self.Menu.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'),'Plano Nacional de Saúde 2012 - 2016')
        self.Menu3 = self.Menu.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'),'Plano Nacional de Saúde 2004 - 2010')
        self.Menu4 = self.Menu.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'),'Programas de Saúde Prioritários')
        Menu5 = self.Menu.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'),'Indicadores de caracterização dos ACES')
        self.Menu6 = self.Menu.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'),'Transparência SNS')

        # Primeiro Menu
        SubMenu1_1 = self.Menu1.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'),"Indicadores de Metas")
        self.SubSubMenu1_1_1 = QAction("Proporção de óbitos até aos 70 anos relativamente ao total de óbitos", self.iface.mainWindow())
        self.SubSubMenu1_1_2 = QAction("Anos de vida saudável aos 65 anos", self.iface.mainWindow())
        SubMenu1_1.addAction(self.SubSubMenu1_1_1)
        SubMenu1_1.addAction(self.SubSubMenu1_1_2)
        self.SubSubMenu1_1_1.triggered.connect(lambda: self.run('Ind. de Metas 1', 5, "%"))
        self.SubSubMenu1_1_2.triggered.connect(lambda: self.run('Ind. de Metas 2', 5, "Anos"))

        self.SubMenu1_2 = self.Menu1.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Indicadores de Monotorização")
        SubSub1_2_1 = self.SubMenu1_2.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Situação sociodemográfica e económica")
        SubSub1_2_2 = self.SubMenu1_2.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Estado de Saúde")
        SubSub1_2_3 = self.SubMenu1_2.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Determinantes em Saúde")
        SubSub1_2_4 = self.SubMenu1_2.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Recursos e produção em Saúde")
        self.SubSubSubMenu1_2_1_1 = QAction("População residente dos 0 aos 14 anos", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_2 = QAction("População residente dos 15 aos 24 anos", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_3 = QAction("População residente dos 25 aos 64 anos", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_4 = QAction("População residente com 65 e mais anos", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_5 = QAction("Taxa bruta de natalidade por 1000 habitantes", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_6 = QAction("Índice sintético de fecundidade", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_7 = QAction("População residente em risco de pobreza ou exclusão social", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_8 = QAction("População residente dos 0 aos 17 anos em risco de pobreza ou exclusão social", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_9 = QAction("População residente dos 18 aos 64 anos em risco de pobreza ou exclusão social",self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_10 = QAction("População residente com 65 e mais anos em risco de pobreza ou exclusão social",self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_11 = QAction("Desigualdade na distribuição de rendimentos S80/S20",self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_12 = QAction("Desigualdade na distribuição de rendimentos S80/S20 na população residente com menos de 65 anos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_13 = QAction("Desigualdade na distribuição de rendimentos S80/S20 na população residente com 65 e mais anos", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_14 = QAction("Taxa de desemprego",self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_15 = QAction("Taxa de desemprego na população dos 15 aos 24 anos", self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_16 = QAction("Taxa de desemprego na população dos 25 aos 34 anos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_17 = QAction("Taxa de desemprego na população dos 35 aos 44 anos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_18 = QAction("Taxa de desemprego na população com 45 e mais anos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_1_19 = QAction("Coeficiente de Gini",self.iface.mainWindow())
        SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_1); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_2); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_3)
        SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_4); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_5); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_6)
        SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_7); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_8); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_9)
        SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_10); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_11); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_12)
        SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_13); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_14); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_15)
        SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_16); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_17); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_18); SubSub1_2_1.addAction(self.SubSubSubMenu1_2_1_19)
        self.SubSubSubMenu1_2_1_1.triggered.connect(lambda: self.run('Ind. Mon. STSE 1', 5, "Habitantes")); self.SubSubSubMenu1_2_1_2.triggered.connect(lambda: self.run('Ind. Mon. STSE 2', 5, "Habitantes")); self.SubSubSubMenu1_2_1_3.triggered.connect(lambda: self.run('Ind. Mon. STSE 3', 5, "Habitantes"))
        self.SubSubSubMenu1_2_1_4.triggered.connect(lambda: self.run('Ind. Mon. STSE 4', 5, "Habitantes")); self.SubSubSubMenu1_2_1_5.triggered.connect(lambda: self.run('Ind. Mon. STSE 5', 5, "Nados-vivos por 1000 habitantes")); self.SubSubSubMenu1_2_1_6.triggered.connect(lambda: self.run('Ind. Mon. STSE 6', 5, ""))
        self.SubSubSubMenu1_2_1_7.triggered.connect(lambda: self.run('Ind. Mon. STSE 7', 5, "%")); self.SubSubSubMenu1_2_1_8.triggered.connect(lambda: self.run('Ind. Mon. STSE 8', 5, "%")); self.SubSubSubMenu1_2_1_9.triggered.connect(lambda: self.run('Ind. Mon. STSE 9', 5, "%"))
        self.SubSubSubMenu1_2_1_10.triggered.connect(lambda: self.run('Ind. Mon. STSE 10', 5, "%")); self.SubSubSubMenu1_2_1_11.triggered.connect(lambda: self.run('Ind. Mon. STSE 11', 5, "%")); self.SubSubSubMenu1_2_1_12.triggered.connect(lambda: self.run('Ind. Mon. STSE 12', 5, "%"));
        self.SubSubSubMenu1_2_1_13.triggered.connect(lambda: self.run('Ind. Mon. STSE 13', 5, "%")); self.SubSubSubMenu1_2_1_14.triggered.connect(lambda: self.run('Ind. Mon. STSE 14', 5, "%")); self.SubSubSubMenu1_2_1_15.triggered.connect(lambda: self.run('Ind. Mon. STSE 15', 5, "%"))
        self.SubSubSubMenu1_2_1_16.triggered.connect(lambda: self.run('Ind. Mon. STSE 16', 5, "%")); self.SubSubSubMenu1_2_1_17.triggered.connect(lambda: self.run('Ind. Mon. STSE 17', 5, "%")); self.SubSubSubMenu1_2_1_18.triggered.connect(lambda: self.run('Ind. Mon. STSE 18', 5, "%")); self.SubSubSubMenu1_2_1_19.triggered.connect(lambda: self.run('Ind. Mon. STSE 19', 5, "%"))

        self.SubSubSubMenu1_2_3_1 = QAction("Proporção da população residente com 18 ou mais anos com obesidade",self.iface.mainWindow())
        self.SubSubSubMenu1_2_3_2 = QAction("Proporção da população residente com 15 ou mais anos com hipertensão arterial",self.iface.mainWindow())
        self.SubSubSubMenu1_2_3_3 = QAction("Proporção da população residente com 15 ou mais anos que referiu consumir tabaco diariamente",self.iface.mainWindow())
        self.SubSubSubMenu1_2_3_4 = QAction("Consumo de álcool puro na população residente com 15 ou mais anos, litros per capita",self.iface.mainWindow())
        self.SubSubSubMenu1_2_3_5 = QAction("Proporção da população residente com 15 ou mais anos que pratica exercício físico pelo menos três dias por semana numa semana normal",self.iface.mainWindow())
        SubSub1_2_3.addAction(self.SubSubSubMenu1_2_3_1); SubSub1_2_3.addAction(self.SubSubSubMenu1_2_3_2); SubSub1_2_3.addAction(self.SubSubSubMenu1_2_3_3)
        SubSub1_2_3.addAction(self.SubSubSubMenu1_2_3_4); SubSub1_2_3.addAction(self.SubSubSubMenu1_2_3_5)
        self.SubSubSubMenu1_2_3_1.triggered.connect(lambda: self.run('Ind. Mon. DS 1', 5, "%")); self.SubSubSubMenu1_2_3_2.triggered.connect(lambda: self.run('Ind. Mon. DS 2', 5, "%")); self.SubSubSubMenu1_2_3_3.triggered.connect(lambda: self.run('Ind. Mon. DS 3', 5, "%"))
        self.SubSubSubMenu1_2_3_4.triggered.connect(lambda: self.run('Ind. Mon. DS 4', 5, "Litros de álcool puro por adulto (15+ ano")); self.SubSubSubMenu1_2_3_5.triggered.connect(lambda: self.run('Ind. Mon. DS 5', 5, "%"))

        self.SubSubSubMenu1_2_2_1 = QAction("Taxa de mortalidade infantil por 1000 nados-vivos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_2 = QAction("Taxa de mortalidade perinatal por 1000 nascimentos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_3 = QAction("Proporção de nados-vivos com baixo peso à nascença",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_4 = QAction("Esperança de vida à nascença (Metodologia de 2007)",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_5 = QAction("Esperança de vida aos 65 anos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_6 = QAction("Anos de vida saudável à nascença", self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_7 = QAction("Taxa de novos casos de infeção por vírus da imunodeficiência humana (VIH) por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_8 = QAction("Taxa de novos casos de SIDA por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_9 = QAction("Taxa de incidência padronizada de tumores malignos, por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_10 = QAction("Taxa de mortalidade padronizada por causas externas por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_11 = QAction("Proporção da população residente com 16 ou mais anos de idade com autoapreciação positiva do estado de saúde",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_12 = QAction("Taxa de mortalidade prematura por doenças não transmissíveis por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_13 = QAction("Taxa de mortalidade prematura por tumores malignos por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_14 = QAction("Taxa de mortalidade prematura por diabetes por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_15 = QAction("Taxa de mortalidade prematura por doenças do aparelho circulatório por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_2_16 = QAction("Taxa de mortalidade prematura por doenças respiratórias crónicas por 100 000 habitantes",self.iface.mainWindow())
        SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_1); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_2); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_3)
        SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_4); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_5); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_6)
        SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_7); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_8); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_9)
        SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_10); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_11); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_12)
        SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_13); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_14); SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_15)
        SubSub1_2_2.addAction(self.SubSubSubMenu1_2_2_16)
        self.SubSubSubMenu1_2_2_1.triggered.connect(lambda: self.run('Ind. Mon. ES 1', 5, "Óbitos Infantis por 1000 nados-vivos")); self.SubSubSubMenu1_2_2_2.triggered.connect(lambda: self.run('Ind. Mon. ES 2', 5, "‰")); self.SubSubSubMenu1_2_2_3.triggered.connect(lambda: self.run('Ind. Mon. ES 3', 5, "%"))
        self.SubSubSubMenu1_2_2_4.triggered.connect(lambda: self.run('Ind. Mon. ES 4', 5, "Anos de vida")); self.SubSubSubMenu1_2_2_5.triggered.connect(lambda: self.run('Ind. Mon. ES 5', 5, "Anos de vida")); self.SubSubSubMenu1_2_2_6.triggered.connect(lambda: self.run('Ind. Mon. ES 6', 5, "Anos"))
        self.SubSubSubMenu1_2_2_7.triggered.connect(lambda: self.run('Ind. Mon. ES 7', 5, "Novos casos por 100 000 habitantes")); self.SubSubSubMenu1_2_2_8.triggered.connect(lambda: self.run('Ind. Mon. ES 8', 5, "Novos casos por 100 000 habitantes")); self.SubSubSubMenu1_2_2_9.triggered.connect(lambda: self.run('Ind. Mon. ES 9', 5, "Novos casos por 100 000 habitantes"))
        self.SubSubSubMenu1_2_2_10.triggered.connect(lambda: self.run('Ind. Mon. ES 10', 5, "Óbitos por 100 000 habitantes")); self.SubSubSubMenu1_2_2_11.triggered.connect(lambda: self.run('Ind. Mon. ES 11', 5, "%")); self.SubSubSubMenu1_2_2_12.triggered.connect(lambda: self.run('Ind. Mon. ES 12', 5, "Óbitos por 100 000 habitantes"))
        self.SubSubSubMenu1_2_2_13.triggered.connect(lambda: self.run('Ind. Mon. ES 13', 5, "Óbitos por 100 000 habitantes")); self.SubSubSubMenu1_2_2_14.triggered.connect(lambda: self.run('Ind. Mon. ES 14', 5, "Óbitos por 100 000 habitantes")); self.SubSubSubMenu1_2_2_15.triggered.connect(lambda: self.run('Ind. Mon. ES 15', 5, "Óbitos por 100 000 habitantes"))
        self.SubSubSubMenu1_2_2_16.triggered.connect(lambda: self.run('Ind. Mon. ES 16', 5, "Óbitos por 100 000 habitantes"))

        self.SubSubSubMenu1_2_4_1 = QAction("Número de médicos por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_2 = QAction("Número de médicos de Medicina Geral e Familiar por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_3 = QAction("Número de enfermeiros por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_4 = QAction("Número de enfermeiros nos Cuidados de Saúde Primários por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_5 = QAction("Número de camas dos hospitais por 100 000 habitantes", self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_6 = QAction("Número de camas de cuidados continuados por 100 000 habitantes", self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_7 = QAction("Número de scanners para tomografias axiais computadorizadas dos hospitais por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_8 = QAction("Número de unidades de ressonâncias magnética dos hospitais por 100 000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_9 = QAction("Número de doentes saídos de internamento em hospitais do SNS por 1000 habitantes", self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_10 = QAction("Número de doentes com idade inferior a 65 anos saídos de internamento em hospitais do SNS por 1000 habitantes", self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_11 = QAction("Número de doentes com idade igual ou superior a 65 anos saídos de internamento em hospitais do SNS por 1000 habitantes", self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_12 = QAction("Day-cases em hospitais do SNS por 1000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_13 = QAction("Day-cases de utentes com idade inferior a 65 anos em hospitais do SNS por 1000 habitantes", self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_14 = QAction("Day-cases de utentes com idade igual ou superior a 65 anos em hospitais do SNS por 1000 habitantes",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_15 = QAction("Cobertura da vacina DTPa nas crianças avaliadas com idade igual a 1 ano",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_16 = QAction("Cobertura da vacina VIP nas crianças avaliadas com idade igual a 1 ano",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_17 = QAction("Cobertura da vacina VASPR nas crianças avaliadas com idade igual a 2 anos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_18 = QAction("Cobertura da vacina antigripal sazonal na população residente com 65 e mais anos",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_19 = QAction("Proporção da despesa em saúde no PIB",self.iface.mainWindow())
        self.SubSubSubMenu1_2_4_20 = QAction("Proporção da despesa das famílias na despesa total em saúde",self.iface.mainWindow())
        SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_1); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_2); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_3)
        SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_4); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_5); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_6)
        SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_7); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_8); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_9)
        SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_10); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_11); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_12)
        SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_13); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_14); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_15)
        SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_16); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_17); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_18)
        SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_19); SubSub1_2_4.addAction(self.SubSubSubMenu1_2_4_20)
        self.SubSubSubMenu1_2_4_1.triggered.connect(lambda: self.run('Ind. Mon. RPS 1', 5, "Médicos por 100 000 habitantes")); self.SubSubSubMenu1_2_4_2.triggered.connect(lambda: self.run('Ind. Mon. RPS 2', 5, "Médicos por 100 000 habitantes")); self.SubSubSubMenu1_2_4_3.triggered.connect(lambda: self.run('Ind. Mon. RPS 3', 5, "Enfermeiros por 100 000 habitantes"))
        self.SubSubSubMenu1_2_4_4.triggered.connect(lambda: self.run('Ind. Mon. RPS 4', 5, "Enfermeiros por 100 000 habitantes")); self.SubSubSubMenu1_2_4_5.triggered.connect(lambda: self.run('Ind. Mon. RPS 5', 5, "Camas por 100 000 habitantes")); self.SubSubSubMenu1_2_4_6.triggered.connect(lambda: self.run('Ind. Mon. RPS 6', 5, "Camas por 100 000 habitantes"))
        self.SubSubSubMenu1_2_4_7.triggered.connect(lambda: self.run('Ind. Mon. RPS 7', 5, "Scanners por 100 000 habitantes")); self.SubSubSubMenu1_2_4_8.triggered.connect(lambda: self.run('Ind. Mon. RPS 8', 5, "Unidades por 100 000 habitantes")); self.SubSubSubMenu1_2_4_9.triggered.connect(lambda: self.run('Ind. Mon. RPS 9', 5, "Doentes saídos por 1000 habitantes"))
        self.SubSubSubMenu1_2_4_10.triggered.connect(lambda: self.run('Ind. Mon. RPS 10', 5, "Doentes saídos por 1000 habitantes")); self.SubSubSubMenu1_2_4_11.triggered.connect(lambda: self.run('Ind. Mon. RPS 11', 5, "Doentes saídos por 1000 habitantes")); self.SubSubSubMenu1_2_4_12.triggered.connect(lambda: self.run('Ind. Mon. RPS 12', 5, "Day-cases por 1000 habitantes"))
        self.SubSubSubMenu1_2_4_13.triggered.connect(lambda: self.run('Ind. Mon. RPS 13', 5, "Day-cases por 1000 habitantes")); self.SubSubSubMenu1_2_4_14.triggered.connect(lambda: self.run('Ind. Mon. RPS 14', 5, "Day-cases por 1000 habitantes")); self.SubSubSubMenu1_2_4_15.triggered.connect(lambda: self.run('Ind. Mon. RPS 15', 5, "%"))
        self.SubSubSubMenu1_2_4_16.triggered.connect(lambda: self.run('Ind. Mon. RPS 16', 5, "%")); self.SubSubSubMenu1_2_4_17.triggered.connect(lambda: self.run('Ind. Mon. RPS 17', 5, "%")); self.SubSubSubMenu1_2_4_18.triggered.connect(lambda: self.run('Ind. Mon. RPS 18', 5, "%"))
        self.SubSubSubMenu1_2_4_19.triggered.connect(lambda: self.run('Ind. Mon. RPS 19', 5, "%")); self.SubSubSubMenu1_2_4_20.triggered.connect(lambda: self.run('Ind. Mon. RPS 20', 5, "%"))

        # Segundo Menu
        SubMenu2_1 = self.Menu2.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Ganhos em Saúde")
        self.SubSubMenu2_1_1 = QAction("Anos de Vida Potenciais Perdidos por acidentes de transporte terrestre",self.iface.mainWindow())
        self.SubSubMenu2_1_2 = QAction("Anos de Vida Potenciais Perdidos por doença crónica do fígado", self.iface.mainWindow())
        self.SubSubMenu2_1_3 = QAction("Anos de Vida Potenciais Perdidos por algumas afecções originadas no período perinatal",self.iface.mainWindow())
        self.SubSubMenu2_1_4 = QAction("Anos de Vida Potenciais Perdidos por tumor maligno da traqueia, brônquios e pulmão",self.iface.mainWindow())
        self.SubSubMenu2_1_5 = QAction("Anos de Vida Potenciais Perdidos por tumor maligno do colo do útero",self.iface.mainWindow())
        self.SubSubMenu2_1_6 = QAction("Anos de Vida Potenciais Perdidos por tumor maligno da mama feminina",self.iface.mainWindow())
        self.SubSubMenu2_1_7 = QAction("Anos de Vida Potenciais Perdidos por VIH/SIDA",self.iface.mainWindow())
        self.SubSubMenu2_1_8 = QAction("Anos de Vida Potenciais Perdidos por tumor maligno do cólon, recto e ânus",self.iface.mainWindow())
        self.SubSubMenu2_1_9 = QAction("Anos de Vida Potenciais Perdidos por pneumonia (/100000 hab. abaixo dos 70 anos)",self.iface.mainWindow())
        self.SubSubMenu2_1_10 = QAction("Anos de Vida Potenciais Perdidos por diabetes",self.iface.mainWindow())
        self.SubSubMenu2_1_11 = QAction("Anos de Vida Potenciais Perdidos por doenças carebrovasculares",self.iface.mainWindow())
        self.SubSubMenu2_1_12 = QAction("Internamento por diabetes",self.iface.mainWindow())
        self.SubSubMenu2_1_13 = QAction("Internamento por asma", self.iface.mainWindow())
        self.SubSubMenu2_1_14 = QAction("Internamento por Doença Pulmonar Obstrutiva Crónica", self.iface.mainWindow())
        self.SubSubMenu2_1_15 = QAction("Internamento por epilepsia e estado de grande mal epiléptico", self.iface.mainWindow())
        self.SubSubMenu2_1_16 = QAction("Internamento por insuficiência cardiáca", self.iface.mainWindow())
        self.SubSubMenu2_1_17 = QAction("Internamento por hipertensão arterial", self.iface.mainWindow())
        self.SubSubMenu2_1_18 = QAction("Pensionistas de invalidez", self.iface.mainWindow())
        self.SubSubMenu2_1_19 = QAction("Internamento por angina de peito", self.iface.mainWindow())
        self.SubSubMenu2_1_20 = QAction("Incidência de amputações major em diabéticos", self.iface.mainWindow())
        self.SubSubMenu2_1_21 = QAction("Internamento por causas sensíveis a cuidados de ambulatório", self.iface.mainWindow())
        self.SubSubMenu2_1_22 = QAction("Número médio de dias processados de doença", self.iface.mainWindow())
        SubMenu2_1.addAction(self.SubSubMenu2_1_1); SubMenu2_1.addAction(self.SubSubMenu2_1_2); SubMenu2_1.addAction(self.SubSubMenu2_1_3)
        SubMenu2_1.addAction(self.SubSubMenu2_1_4); SubMenu2_1.addAction(self.SubSubMenu2_1_5); SubMenu2_1.addAction(self.SubSubMenu2_1_6)
        SubMenu2_1.addAction(self.SubSubMenu2_1_7); SubMenu2_1.addAction(self.SubSubMenu2_1_8); SubMenu2_1.addAction(self.SubSubMenu2_1_9)
        SubMenu2_1.addAction(self.SubSubMenu2_1_10); SubMenu2_1.addAction(self.SubSubMenu2_1_11); SubMenu2_1.addAction(self.SubSubMenu2_1_12)
        SubMenu2_1.addAction(self.SubSubMenu2_1_13); SubMenu2_1.addAction(self.SubSubMenu2_1_14); SubMenu2_1.addAction(self.SubSubMenu2_1_15)
        SubMenu2_1.addAction(self.SubSubMenu2_1_16); SubMenu2_1.addAction(self.SubSubMenu2_1_17); SubMenu2_1.addAction(self.SubSubMenu2_1_18)
        SubMenu2_1.addAction(self.SubSubMenu2_1_19); SubMenu2_1.addAction(self.SubSubMenu2_1_20); SubMenu2_1.addAction(self.SubSubMenu2_1_21)
        SubMenu2_1.addAction(self.SubSubMenu2_1_22);
        self.SubSubMenu2_1_1.triggered.connect(lambda: self.run('Ganhos em Saúde 1', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_2.triggered.connect(lambda: self.run('Ganhos em Saúde 2', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_3.triggered.connect(lambda: self.run('Ganhos em Saúde 3', 5, "/100 000 hab abaixo dos 70 anos"))
        self.SubSubMenu2_1_4.triggered.connect(lambda: self.run('Ganhos em Saúde 4', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_5.triggered.connect(lambda: self.run('Ganhos em Saúde 5', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_6.triggered.connect(lambda: self.run('Ganhos em Saúde 6', 5, "/100 000 hab abaixo dos 70 anos"))
        self.SubSubMenu2_1_7.triggered.connect(lambda: self.run('Ganhos em Saúde 7', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_8.triggered.connect(lambda: self.run('Ganhos em Saúde 8', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_9.triggered.connect(lambda: self.run('Ganhos em Saúde 9', 5, "/100 000 hab abaixo dos 70 anos"))
        self.SubSubMenu2_1_10.triggered.connect(lambda: self.run('Ganhos em Saúde 10', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_11.triggered.connect(lambda: self.run('Ganhos em Saúde 11', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_12.triggered.connect(lambda: self.run('Ganhos em Saúde 12', 5, "/100 000 hab abaixo dos 70 anos"))
        self.SubSubMenu2_1_13.triggered.connect(lambda: self.run('Ganhos em Saúde 13', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_14.triggered.connect(lambda: self.run('Ganhos em Saúde 14', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_15.triggered.connect(lambda: self.run('Ganhos em Saúde 15', 5, "/100 000 hab abaixo dos 70 anos"))
        self.SubSubMenu2_1_16.triggered.connect(lambda: self.run('Ganhos em Saúde 16', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_17.triggered.connect(lambda: self.run('Ganhos em Saúde 17', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_18.triggered.connect(lambda: self.run('Ganhos em Saúde 18', 5, "‰"))
        self.SubSubMenu2_1_19.triggered.connect(lambda: self.run('Ganhos em Saúde 19', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu2_1_20.triggered.connect(lambda: self.run('Ganhos em Saúde 20', 5, "/10 000 habitantes")); self.SubSubMenu2_1_21.triggered.connect(lambda: self.run('Ganhos em Saúde 21', 5, ""))
        self.SubSubMenu2_1_22.triggered.connect(lambda: self.run('Ganhos em Saúde 22', 5, ""))


        SubMenu2_2 = self.Menu2.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Estado de Saúde e Desempenho do Sistema de Saúde")
        self.SubSubMenu2_2_1 = QAction("Esperança de vida à nascença (Metodologia de 2007)", self.iface.mainWindow())
        self.SubSubMenu2_2_2 = QAction("Esperança de vida dos 65 aos 69 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_3 = QAction("Nascimentos Pré-termo", self.iface.mainWindow())
        self.SubSubMenu2_2_4 = QAction("Crianças com baixo peso à nascença", self.iface.mainWindow())
        self.SubSubMenu2_2_5 = QAction("Partos por cesariana/100 nados vivos", self.iface.mainWindow())
        self.SubSubMenu2_2_6 = QAction("Nascimentos em mulheres adolescentes", self.iface.mainWindow())
        self.SubSubMenu2_2_7 = QAction("Mortalidade Perinatal", self.iface.mainWindow())
        self.SubSubMenu2_2_8 = QAction("Mortalidade infantil", self.iface.mainWindow())
        self.SubSubMenu2_2_9 = QAction("Risco de morrer aos 5 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_10 = QAction("Mortalidade dos 5 aos 14 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_11 = QAction("Mortalidade dos 15 aos 24 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_12 = QAction("Mortalidade dos 25 aos 64 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_13 = QAction("Mortalidade dos 65 aos 74 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_14 = QAction("Taxa de mortalidade padronizada por cancro da mama feminina antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_15 = QAction("Taxa de mortalidade padronizada por cancro do colo do útero antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_16 = QAction("Taxa de mortalidade padronizada por por cancro do cólon e reto antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_17 = QAction("Taxa de mortalidade padronizada por doença isquémica cardíaca antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_18 = QAction("Taxa de mortalidade padronizada por doenças cerebrovasculares antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_19 = QAction("Taxa de mortalidade padronizada por SIDA antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_20 = QAction("Taxa de mortalidade padronizada por suicídio antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_21 = QAction("Taxa de mortalidade padronizada por doenças atribuíveis ao álcool antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_22 = QAction("Taxa de mortalidade padronizada por acidentes de viação antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_23 = QAction("Taxa de mortalidade padronizada por acidentes laborais", self.iface.mainWindow())
        self.SubSubMenu2_2_24 = QAction("Cobertura da monitorização do estado de saúde dos alunos aos 6 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_25 = QAction("Cobertura da monitorização do estado de saúde dos alunos aos 13 anos", self.iface.mainWindow())
        self.SubSubMenu2_2_26 = QAction("Médicos", self.iface.mainWindow())
        self.SubSubMenu2_2_27 = QAction("Enfermeiros por 100 000 habitantes, segundo o local de trabalho", self.iface.mainWindow())
        self.SubSubMenu2_2_28 = QAction("Enfermeiros nos Cuidados de Saúde Primários", self.iface.mainWindow())
        self.SubSubMenu2_2_29 = QAction("Consultas com médicos de Medicina Geral e Familiar/Clínica Geral por habitante/ano", self.iface.mainWindow())
        self.SubSubMenu2_2_30 = QAction("Consultas médicas hospitalares", self.iface.mainWindow())
        self.SubSubMenu2_2_31 = QAction("Atendimentos em urgências hospitalares", self.iface.mainWindow())
        self.SubSubMenu2_2_32 = QAction("Rácio entre urgências hospitalares e consultas externas", self.iface.mainWindow())
        self.SubSubMenu2_2_33 = QAction("Despesa em medicamentos na despesa em saúde", self.iface.mainWindow())
        self.SubSubMenu2_2_34 = QAction("Medicamentos genéricos no mercado total de medicamentos", self.iface.mainWindow())
        self.SubSubMenu2_2_35 = QAction("Consumo de analgésicos e antipiréticos no SNS em regime ambulatório (DDD/1000 hab./dia)", self.iface.mainWindow())
        self.SubSubMenu2_2_36 = QAction("Consumo de ansiolíticos, hipnóticos e sedativos no SNS em regime ambulatório", self.iface.mainWindow())
        self.SubSubMenu2_2_37 = QAction("Consumo de antidepressivos no SNS em regime ambulatório", self.iface.mainWindow())
        self.SubSubMenu2_2_38 = QAction("Consumo de antibacterianos no SNS em regime ambulatório", self.iface.mainWindow())
        self.SubSubMenu2_2_39 = QAction("Número médio de dias processados de doença", self.iface.mainWindow())
        SubMenu2_2.addAction(self.SubSubMenu2_2_1); SubMenu2_2.addAction(self.SubSubMenu2_2_2); SubMenu2_2.addAction(self.SubSubMenu2_2_3);
        SubMenu2_2.addAction(self.SubSubMenu2_2_4); SubMenu2_2.addAction(self.SubSubMenu2_2_5); SubMenu2_2.addAction(self.SubSubMenu2_2_6);
        SubMenu2_2.addAction(self.SubSubMenu2_2_7); SubMenu2_2.addAction(self.SubSubMenu2_2_8); SubMenu2_2.addAction(self.SubSubMenu2_2_9);
        SubMenu2_2.addAction(self.SubSubMenu2_2_10); SubMenu2_2.addAction(self.SubSubMenu2_2_11); SubMenu2_2.addAction(self.SubSubMenu2_2_12);
        SubMenu2_2.addAction(self.SubSubMenu2_2_13); SubMenu2_2.addAction(self.SubSubMenu2_2_14); SubMenu2_2.addAction(self.SubSubMenu2_2_15);
        SubMenu2_2.addAction(self.SubSubMenu2_2_16); SubMenu2_2.addAction(self.SubSubMenu2_2_17); SubMenu2_2.addAction(self.SubSubMenu2_2_18);
        SubMenu2_2.addAction(self.SubSubMenu2_2_19); SubMenu2_2.addAction(self.SubSubMenu2_2_20); SubMenu2_2.addAction(self.SubSubMenu2_2_21);
        SubMenu2_2.addAction(self.SubSubMenu2_2_22); SubMenu2_2.addAction(self.SubSubMenu2_2_23); SubMenu2_2.addAction(self.SubSubMenu2_2_24);
        SubMenu2_2.addAction(self.SubSubMenu2_2_25); SubMenu2_2.addAction(self.SubSubMenu2_2_26); SubMenu2_2.addAction(self.SubSubMenu2_2_27);
        SubMenu2_2.addAction(self.SubSubMenu2_2_28); SubMenu2_2.addAction(self.SubSubMenu2_2_29); SubMenu2_2.addAction(self.SubSubMenu2_2_30);
        SubMenu2_2.addAction(self.SubSubMenu2_2_31); SubMenu2_2.addAction(self.SubSubMenu2_2_32); SubMenu2_2.addAction(self.SubSubMenu2_2_33);
        SubMenu2_2.addAction(self.SubSubMenu2_2_34); SubMenu2_2.addAction(self.SubSubMenu2_2_35); SubMenu2_2.addAction(self.SubSubMenu2_2_36);
        SubMenu2_2.addAction(self.SubSubMenu2_2_37); SubMenu2_2.addAction(self.SubSubMenu2_2_38); SubMenu2_2.addAction(self.SubSubMenu2_2_39);
        self.SubSubMenu2_2_1.triggered.connect(lambda: self.run('ESDSS 1', 5, "Anos de vida")); self.SubSubMenu2_2_2.triggered.connect(lambda: self.run('ESDSS 2', 5, "Anos de vida")); self.SubSubMenu2_2_3.triggered.connect(lambda: self.run('ESDSS 3', 5, "%"));
        self.SubSubMenu2_2_4.triggered.connect(lambda: self.run('ESDSS 4', 5, "%")); self.SubSubMenu2_2_5.triggered.connect(lambda: self.run('ESDSS 5', 5, "%")); self.SubSubMenu2_2_6.triggered.connect(lambda: self.run('ESDSS 6', 5, "%"));
        self.SubSubMenu2_2_7.triggered.connect(lambda: self.run('ESDSS 7', 5, "‰")); self.SubSubMenu2_2_8.triggered.connect(lambda: self.run('ESDSS 8', 5, "/1000 nados-vivos")); self.SubSubMenu2_2_9.triggered.connect(lambda: self.run('ESDSS 9', 5, "‰"));
        self.SubSubMenu2_2_10.triggered.connect(lambda: self.run('ESDSS 10', 5, "/100 000 habitantes")); self.SubSubMenu2_2_11.triggered.connect(lambda: self.run('ESDSS 11', 5, "/100 000 habitantes")); self.SubSubMenu2_2_12.triggered.connect(lambda: self.run('ESDSS 12', 5, "/100 000 habitantes"));
        self.SubSubMenu2_2_13.triggered.connect(lambda: self.run('ESDSS 13', 5, "/100 000 habitantes")); self.SubSubMenu2_2_14.triggered.connect(lambda: self.run('ESDSS 14', 5, "/100 000 mulheres")); self.SubSubMenu2_2_15.triggered.connect(lambda: self.run('ESDSS 15', 5, "/100 000 mulheres"));
        self.SubSubMenu2_2_16.triggered.connect(lambda: self.run('ESDSS 16', 5, "/100 000 habitantes")); self.SubSubMenu2_2_17.triggered.connect(lambda: self.run('ESDSS 17', 5, "/100 000 habitantes")); self.SubSubMenu2_2_18.triggered.connect(lambda: self.run('ESDSS 18', 5, "/100 000 habitantes"));
        self.SubSubMenu2_2_19.triggered.connect(lambda: self.run('ESDSS 19', 5, "/100 000 habitantes")); self.SubSubMenu2_2_20.triggered.connect(lambda: self.run('ESDSS 20', 5, "/100 000 habitantes")); self.SubSubMenu2_2_21.triggered.connect(lambda: self.run('ESDSS 21', 5, "/100 000 habitantes"));
        self.SubSubMenu2_2_22.triggered.connect(lambda: self.run('ESDSS 22', 5, "/100 000 habitantes")); self.SubSubMenu2_2_23.triggered.connect(lambda: self.run('ESDSS 23', 5, "/100 000 habitantes")); self.SubSubMenu2_2_24.triggered.connect(lambda: self.run('ESDSS 24', 5, "%"));
        self.SubSubMenu2_2_25.triggered.connect(lambda: self.run('ESDSS 25', 5, "%")); self.SubSubMenu2_2_26.triggered.connect(lambda: self.run('ESDSS 26', 5, "/100 000 habitantes")); self.SubSubMenu2_2_27.triggered.connect(lambda: self.run('ESDSS 27', 5, "/100 000 habitantes"));
        self.SubSubMenu2_2_28.triggered.connect(lambda: self.run('ESDSS 28', 5, "/100 000 habitantes")); self.SubSubMenu2_2_29.triggered.connect(lambda: self.run('ESDSS 29', 5, "/hab/ano")); self.SubSubMenu2_2_30.triggered.connect(lambda: self.run('ESDSS 30', 5, "/hab/ano"));
        self.SubSubMenu2_2_31.triggered.connect(lambda: self.run('ESDSS 31', 5, "/1000 hab/ano")); self.SubSubMenu2_2_32.triggered.connect(lambda: self.run('ESDSS 32', 5, "")); self.SubSubMenu2_2_33.triggered.connect(lambda: self.run('ESDSS 33', 5, "%"));
        self.SubSubMenu2_2_34.triggered.connect(lambda: self.run('ESDSS 34', 5, "%")); self.SubSubMenu2_2_35.triggered.connect(lambda: self.run('ESDSS 35', 5, "DDD/1000 hab/dia")); self.SubSubMenu2_2_36.triggered.connect(lambda: self.run('ESDSS 36', 5, "DDD/1000 hab/dia"));
        self.SubSubMenu2_2_37.triggered.connect(lambda: self.run('ESDSS 37', 5, "DDD/1000 hab/dia")); self.SubSubMenu2_2_38.triggered.connect(lambda: self.run('ESDSS 38', 5, "DDD/1000 hab/dia")); self.SubSubMenu2_2_39.triggered.connect(lambda: self.run('ESDSS 39', 5, "Dias"));

        # Terceiro Menu
        SubMenu3_1 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Nascer com saúde")
        self.SubSubMenu3_1_1 = QAction("Taxa quinquenal de mortalidade neonatal por 1000 nados-vivos", self.iface.mainWindow())
        self.SubSubMenu3_1_2 = QAction("Esperança de vida à nascença", self.iface.mainWindow())
        self.SubSubMenu3_1_3 = QAction("Esperança de vida à nascença (Metodologia de 2007)", self.iface.mainWindow())
        self.SubSubMenu3_1_4 = QAction("Mortalidade Fetal", self.iface.mainWindow())
        self.SubSubMenu3_1_5 = QAction("Mortalidade Perinatal", self.iface.mainWindow())
        self.SubSubMenu3_1_6 = QAction("Mortalidade Neonatal", self.iface.mainWindow())
        self.SubSubMenu3_1_7 = QAction("Nascimentos Pré-termo", self.iface.mainWindow())
        self.SubSubMenu3_1_8 = QAction("Crianças com baixo peso à nascença", self.iface.mainWindow())
        self.SubSubMenu3_1_9 = QAction("Partos por cesariana/100 partos", self.iface.mainWindow())
        self.SubSubMenu3_1_10 = QAction("Partos por cesariana/100 nados vivos", self.iface.mainWindow())
        SubMenu3_1.addAction(self.SubSubMenu3_1_1); SubMenu3_1.addAction(self.SubSubMenu3_1_2); SubMenu3_1.addAction(self.SubSubMenu3_1_3);
        SubMenu3_1.addAction(self.SubSubMenu3_1_4); SubMenu3_1.addAction(self.SubSubMenu3_1_5); SubMenu3_1.addAction(self.SubSubMenu3_1_6);
        SubMenu3_1.addAction(self.SubSubMenu3_1_7); SubMenu3_1.addAction(self.SubSubMenu3_1_8); SubMenu3_1.addAction(self.SubSubMenu3_1_9);
        SubMenu3_1.addAction(self.SubSubMenu3_1_10);
        self.SubSubMenu3_1_1.triggered.connect(lambda: self.run('Nascer com saúde 1', 5, "Óbitos neonatais por 1000 nados-vivos")); self.SubSubMenu3_1_2.triggered.connect(lambda: self.run('Nascer com saúde 2', 5, "Anos de vida")); self.SubSubMenu3_1_3.triggered.connect(lambda: self.run('Nascer com saúde 3', 5, "Anos de vida"));
        self.SubSubMenu3_1_4.triggered.connect(lambda: self.run('Nascer com saúde 4', 5, "‰")); self.SubSubMenu3_1_5.triggered.connect(lambda: self.run('Nascer com saúde 5', 5, "‰")); self.SubSubMenu3_1_6.triggered.connect(lambda: self.run('Nascer com saúde 6', 5, "Óbitos neonatais por 1000 nados-vivos"));
        self.SubSubMenu3_1_7.triggered.connect(lambda: self.run('Nascer com saúde 7', 5, "%")); self.SubSubMenu3_1_8.triggered.connect(lambda: self.run('Nascer com saúde 8', 5, "%")); self.SubSubMenu3_1_9.triggered.connect(lambda: self.run('Nascer com saúde 9', 5, "%"));
        self.SubSubMenu3_1_10.triggered.connect(lambda: self.run('Nascer com saúde 10', 5, "%"));

        SubMenu3_2 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Saúde Escolar")
        self.SubSubMenu3_2_1 = QAction("Centros de Saúde com Equipas de Saúde Escolar", self.iface.mainWindow())
        self.SubSubMenu3_2_2 = QAction("Cobertura da monitorização do estado de saúde dos alunos aos 6 anos", self.iface.mainWindow())
        self.SubSubMenu3_2_3 = QAction("Cobertura da monitorização do estado de saúde dos alunos aos 13 anos", self.iface.mainWindow())
        self.SubSubMenu3_2_4 = QAction("Alunos com PNV atualizado na pré-escola", self.iface.mainWindow())
        self.SubSubMenu3_2_5 = QAction("Alunos com PNV atualizado aos 6 anos", self.iface.mainWindow())
        self.SubSubMenu3_2_6 = QAction("Alunos com PNV atualizado aos 13 anos", self.iface.mainWindow())
        self.SubSubMenu3_2_7 = QAction("Alunos com necessidades de saúde especiais passíveis de resolução, que têm, no fim do ano letivo, o seu problema de saúde resolvido", self.iface.mainWindow())
        self.SubSubMenu3_2_8 = QAction("Escolas com avaliação das condições de segurança, higiene e saúde das escolas", self.iface.mainWindow())
        self.SubSubMenu3_2_9 = QAction("Escolas com boas condições de segurança e higiene do meio ambiente", self.iface.mainWindow())
        self.SubSubMenu3_2_10 = QAction("Escolas com boas condições de seguranla e higiene dos edifícios e recintos", self.iface.mainWindow())
        self.SubSubMenu3_2_11 = QAction("Intervenções de promoção da saúde em saúde escolar com orientações técnicas definidas", self.iface.mainWindow())
        self.SubSubMenu3_2_12 = QAction("Crianças com 6 anos livres de cáries", self.iface.mainWindow())
        self.SubSubMenu3_2_13 = QAction("Índice de CPOD aos 12 anos", self.iface.mainWindow())
        self.SubSubMenu3_2_14 = QAction("Jovens necessitados de tratamento com dentes tratados aos 12 anos", self.iface.mainWindow())
        SubMenu3_2.addAction(self.SubSubMenu3_2_1); SubMenu3_2.addAction(self.SubSubMenu3_2_2); SubMenu3_2.addAction(self.SubSubMenu3_2_3);
        SubMenu3_2.addAction(self.SubSubMenu3_2_4); SubMenu3_2.addAction(self.SubSubMenu3_2_5); SubMenu3_2.addAction(self.SubSubMenu3_2_6);
        SubMenu3_2.addAction(self.SubSubMenu3_2_7); SubMenu3_2.addAction(self.SubSubMenu3_2_8); SubMenu3_2.addAction(self.SubSubMenu3_2_9);
        SubMenu3_2.addAction(self.SubSubMenu3_2_10); SubMenu3_2.addAction(self.SubSubMenu3_2_11); SubMenu3_2.addAction(self.SubSubMenu3_2_12);
        SubMenu3_2.addAction(self.SubSubMenu3_2_13); SubMenu3_2.addAction(self.SubSubMenu3_2_14);
        self.SubSubMenu3_2_1.triggered.connect(lambda: self.run('Saúde Escolar 1', 5, "%")); self.SubSubMenu3_2_2.triggered.connect(lambda: self.run('Saúde Escolar 2', 5, "%")); self.SubSubMenu3_2_3.triggered.connect(lambda: self.run('Saúde Escolar 3', 5, "%"));
        self.SubSubMenu3_2_4.triggered.connect(lambda: self.run('Saúde Escolar 4', 5, "%")); self.SubSubMenu3_2_5.triggered.connect(lambda: self.run('Saúde Escolar 5', 5, "%")); self.SubSubMenu3_2_6.triggered.connect(lambda: self.run('Saúde Escolar 6', 5, "%"));
        self.SubSubMenu3_2_7.triggered.connect(lambda: self.run('Saúde Escolar 7', 5, "%")); self.SubSubMenu3_2_8.triggered.connect(lambda: self.run('Saúde Escolar 8', 5, "%")); self.SubSubMenu3_2_9.triggered.connect(lambda: self.run('Saúde Escolar 9', 5, "%"));
        self.SubSubMenu3_2_10.triggered.connect(lambda: self.run('Saúde Escolar 10', 5, "%")); self.SubSubMenu3_2_11.triggered.connect(lambda: self.run('Saúde Escolar 11', 5, "%")); self.SubSubMenu3_2_12.triggered.connect(lambda: self.run('Saúde Escolar 12', 5, "%"));
        self.SubSubMenu3_2_13.triggered.connect(lambda: self.run('Saúde Escolar 13', 5, " ")); self.SubSubMenu3_2_14.triggered.connect(lambda: self.run('Saúde Escolar 14', 5, "%"));

        SubMenu3_3 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Crescer com segurança")
        self.SubSubMenu3_3_1 = QAction("Esperança de vida dos 1 aos 4 anos", self.iface.mainWindow())
        self.SubSubMenu3_3_2 = QAction("Taxa quinquenal de mortalidade infantil", self.iface.mainWindow())
        self.SubSubMenu3_3_3 = QAction("Mortalidade infantil", self.iface.mainWindow())
        self.SubSubMenu3_3_4 = QAction("Mortalidade dos 1 aos 4 anos", self.iface.mainWindow())
        self.SubSubMenu3_3_5 = QAction("Mortalidade dos 5 aos 9 anos", self.iface.mainWindow())
        self.SubSubMenu3_3_6 = QAction("Risco de morrer aos 5 anos", self.iface.mainWindow())
        self.SubSubMenu3_3_7 = QAction("Taxa de lactantes em exclusivo até aos 3 meses", self.iface.mainWindow())
        SubMenu3_3.addAction(self.SubSubMenu3_3_1); SubMenu3_3.addAction(self.SubSubMenu3_3_2); SubMenu3_3.addAction(self.SubSubMenu3_3_3);
        SubMenu3_3.addAction(self.SubSubMenu3_3_4); SubMenu3_3.addAction(self.SubSubMenu3_3_5); SubMenu3_3.addAction(self.SubSubMenu3_3_6);
        SubMenu3_3.addAction(self.SubSubMenu3_3_7);
        self.SubSubMenu3_3_1.triggered.connect(lambda: self.run('Crescer com segurança 1', 5, "Anos de vida")); self.SubSubMenu3_3_2.triggered.connect(lambda: self.run('Crescer com segurança 2', 5, "Óbitos infantis por 1000 nados-vivos")); self.SubSubMenu3_3_3.triggered.connect(lambda: self.run('Crescer com segurança 3', 5, "Óbitos infantis por 1000 nados-vivos"));
        self.SubSubMenu3_3_4.triggered.connect(lambda: self.run('Crescer com segurança 4', 5, "/100 000 indivíduos")); self.SubSubMenu3_3_5.triggered.connect(lambda: self.run('Crescer com segurança 5', 5, "/100 000 indivíduos")); self.SubSubMenu3_3_6.triggered.connect(lambda: self.run('Crescer com segurança 6', 5, "‰"));
        self.SubSubMenu3_3_7.triggered.connect(lambda: self.run('Crescer com segurança 7', 5, "%"));

        SubMenu3_4 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Uma juventude à procura de um futuro saudável")
        self.SubSubMenu3_4_1 = QAction("Esperança de vida dos 15 aos 19 anos", self.iface.mainWindow())
        self.SubSubMenu3_4_2 = QAction("Mortalidade dos 10 aos 14 anos", self.iface.mainWindow())
        self.SubSubMenu3_4_3 = QAction("Mortalidade dos 15 aos 19 anos", self.iface.mainWindow())
        self.SubSubMenu3_4_4 = QAction("Mortalidade dos 20 aos 24 anos", self.iface.mainWindow())
        self.SubSubMenu3_4_5 = QAction("Nascimentos em mulheres adolescentes", self.iface.mainWindow())
        self.SubSubMenu3_4_6 = QAction("Auto-apreciação negativa do estado de saúde (15 a 24 anos)", self.iface.mainWindow())
        self.SubSubMenu3_4_7 = QAction("Tabaco - consumo diário (15 a 24 anos)", self.iface.mainWindow())
        self.SubSubMenu3_4_8 = QAction("Álcool - consumo nos últimos 12 meses (15 a 24 anos)", self.iface.mainWindow())
        self.SubSubMenu3_4_9 = QAction("Excesso de peso (18 a 24 anos)", self.iface.mainWindow())
        self.SubSubMenu3_4_10 = QAction("Obesidade (18 a 24 anos)", self.iface.mainWindow())
        SubMenu3_4.addAction(self.SubSubMenu3_4_1); SubMenu3_4.addAction(self.SubSubMenu3_4_2); SubMenu3_4.addAction(self.SubSubMenu3_4_3);
        SubMenu3_4.addAction(self.SubSubMenu3_4_4); SubMenu3_4.addAction(self.SubSubMenu3_4_5); SubMenu3_4.addAction(self.SubSubMenu3_4_6);
        SubMenu3_4.addAction(self.SubSubMenu3_4_7); SubMenu3_4.addAction(self.SubSubMenu3_4_8); SubMenu3_4.addAction(self.SubSubMenu3_4_9);
        SubMenu3_4.addAction(self.SubSubMenu3_4_10);
        self.SubSubMenu3_4_1.triggered.connect(lambda: self.run('JPFS 1', 5, "Anos de vida")); self.SubSubMenu3_4_2.triggered.connect(lambda: self.run('JPFS 2', 5, "/100 000 indivíduos")); self.SubSubMenu3_4_3.triggered.connect(lambda: self.run('JPFS 3', 5, "/100 000 indivíduos"));
        self.SubSubMenu3_4_4.triggered.connect(lambda: self.run('JPFS 4', 5, "/100 000 indivíduos")); self.SubSubMenu3_4_5.triggered.connect(lambda: self.run('JPFS 5', 5, "%")); self.SubSubMenu3_4_6.triggered.connect(lambda: self.run('JPFS 6', 5, "%"));
        self.SubSubMenu3_4_7.triggered.connect(lambda: self.run('JPFS 7', 5, "%")); self.SubSubMenu3_4_8.triggered.connect(lambda: self.run('JPFS 8', 5, "%")); self.SubSubMenu3_4_9.triggered.connect(lambda: self.run('JPFS 9', 5, "%"));
        self.SubSubMenu3_4_10.triggered.connect(lambda: self.run('JPFS 10', 5, "%"));

        SubMenu3_5 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Uma vida adulta produtiva")
        self.SubSubMenu3_5_1 = QAction("Esperança de vida dos 45 aos 49 anos", self.iface.mainWindow())
        self.SubSubMenu3_5_2 = QAction("Mortalidade dos 25 aos 44 anos", self.iface.mainWindow())
        self.SubSubMenu3_5_3 = QAction("Mortalidade dos 45 aos 64 anos", self.iface.mainWindow())
        self.SubSubMenu3_5_4 = QAction("Nascimentos em mulheres com mais de 35 anos", self.iface.mainWindow())
        self.SubSubMenu3_5_5 = QAction("Auto-apreciação negativa do estado de saúde (35 a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_6 = QAction("Auto-apreciação negativa do estado de saúde (55 a 64 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_7 = QAction("Tabaco - consumo diário (25 a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_8 = QAction("Tabaco - consumo diário (45 a 64 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_9 = QAction("Álcool - consumo nos últimos 12 meses (25 a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_10 = QAction("Álcool - consumo nos últimos 12 meses (45 a 64 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_11 = QAction("Excesso de peso (35 a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_12 = QAction("Excesso de peso (55 a 64 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_13 = QAction("Obesidade (35 a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu3_5_14 = QAction("Obesidade (55 a 64 anos)", self.iface.mainWindow())
        SubMenu3_5.addAction(self.SubSubMenu3_5_1); SubMenu3_5.addAction(self.SubSubMenu3_5_2); SubMenu3_5.addAction(self.SubSubMenu3_5_3);
        SubMenu3_5.addAction(self.SubSubMenu3_5_4); SubMenu3_5.addAction(self.SubSubMenu3_5_5); SubMenu3_5.addAction(self.SubSubMenu3_5_6);
        SubMenu3_5.addAction(self.SubSubMenu3_5_7); SubMenu3_5.addAction(self.SubSubMenu3_5_8); SubMenu3_5.addAction(self.SubSubMenu3_5_9);
        SubMenu3_5.addAction(self.SubSubMenu3_5_10); SubMenu3_5.addAction(self.SubSubMenu3_5_11); SubMenu3_5.addAction(self.SubSubMenu3_5_12);
        SubMenu3_5.addAction(self.SubSubMenu3_5_13); SubMenu3_5.addAction(self.SubSubMenu3_5_14);
        self.SubSubMenu3_5_1.triggered.connect(lambda: self.run('VAP 1', 5, "Anos de vida")); self.SubSubMenu3_5_2.triggered.connect(lambda: self.run('VAP 2', 5, "/100 000 indivíduos")); self.SubSubMenu3_5_3.triggered.connect(lambda: self.run('VAP 3', 5, "/100 000 indivíduos"));
        self.SubSubMenu3_5_4.triggered.connect(lambda: self.run('VAP 4', 5, "%")); self.SubSubMenu3_5_5.triggered.connect(lambda: self.run('VAP 5', 5, "%")); self.SubSubMenu3_5_6.triggered.connect(lambda: self.run('VAP 6', 5, "%"));
        self.SubSubMenu3_5_7.triggered.connect(lambda: self.run('VAP 7', 5, "%")); self.SubSubMenu3_5_8.triggered.connect(lambda: self.run('VAP 8', 5, "%")); self.SubSubMenu3_5_9.triggered.connect(lambda: self.run('VAP 9', 5, "%"));
        self.SubSubMenu3_5_10.triggered.connect(lambda: self.run('VAP 10', 5, "%")); self.SubSubMenu3_5_11.triggered.connect(lambda: self.run('VAP 11', 5, "%")); self.SubSubMenu3_5_12.triggered.connect(lambda: self.run('VAP 12', 5, "%"));
        self.SubSubMenu3_5_13.triggered.connect(lambda: self.run('VAP 13', 5, "%")); self.SubSubMenu3_5_14.triggered.connect(lambda: self.run('VAP 14', 5, "%"));

        SubMenu3_6 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Um envelhecimento ativo")
        self.SubSubMenu3_6_1 = QAction("Esperança de vida dos 65 aos 69 anos", self.iface.mainWindow())
        self.SubSubMenu3_6_2 = QAction("Auto-apreciação negativa do estado de saúde (65 a 74 anos)", self.iface.mainWindow())
        self.SubSubMenu3_6_3 = QAction("Tabaco - consumo diário (65 a 74 anos)", self.iface.mainWindow())
        self.SubSubMenu3_6_4 = QAction("Álcool - consumo nos últimos 12 meses (65 a 74 anos)", self.iface.mainWindow())
        self.SubSubMenu3_6_5 = QAction("Excesso de peso (65 a 74 anos)", self.iface.mainWindow())
        self.SubSubMenu3_6_6 = QAction("Obesidade (65 a 74 anos)", self.iface.mainWindow())
        SubMenu3_6.addAction(self.SubSubMenu3_6_1); SubMenu3_6.addAction(self.SubSubMenu3_6_2); SubMenu3_6.addAction(self.SubSubMenu3_6_3);
        SubMenu3_6.addAction(self.SubSubMenu3_6_4); SubMenu3_6.addAction(self.SubSubMenu3_6_5); SubMenu3_6.addAction(self.SubSubMenu3_6_6);
        self.SubSubMenu3_6_1.triggered.connect(lambda: self.run('Envelhecimento ativo 1', 5, "Anos de vida")); self.SubSubMenu3_6_2.triggered.connect(lambda: self.run('Envelhecimento ativo 2', 5, "%")); self.SubSubMenu3_6_3.triggered.connect(lambda: self.run('Envelhecimento ativo 3', 5, "%"));
        self.SubSubMenu3_6_4.triggered.connect(lambda: self.run('Envelhecimento ativo 4', 5, "%")); self.SubSubMenu3_6_5.triggered.connect(lambda: self.run('Envelhecimento ativo 5', 5, "%")); self.SubSubMenu3_6_6.triggered.connect(lambda: self.run('Envelhecimento ativo 6', 5, "%"));

        SubMenu3_7 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Doenças neoplásicas")
        self.SubSubMenu3_7_1 = QAction("Taxa de rastreio do cancro da mama feminina", self.iface.mainWindow())
        self.SubSubMenu3_7_2 = QAction("Taxa de mortalidade padronizada por cancro da mama feminina antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu3_7_3 = QAction("Taxa de rastreio do cancro do colo do útero", self.iface.mainWindow())
        self.SubSubMenu3_7_4 = QAction("Taxa de mortalidade padronizada por cancro do colo do útero antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu3_7_5 = QAction("Taxa de mortalidade padronizada por cancro do cólon e reto antes dos 65 anos", self.iface.mainWindow())
        SubMenu3_7.addAction(self.SubSubMenu3_7_1); SubMenu3_7.addAction(self.SubSubMenu3_7_2); SubMenu3_7.addAction(self.SubSubMenu3_7_3);
        SubMenu3_7.addAction(self.SubSubMenu3_7_4); SubMenu3_7.addAction(self.SubSubMenu3_7_5);
        self.SubSubMenu3_7_1.triggered.connect(lambda: self.run('Doenças neoplásicas 1', 5, "%")); self.SubSubMenu3_7_2.triggered.connect(lambda: self.run('Doenças neoplásicas 2', 5, "Óbitos por 100 000 mulheres")); self.SubSubMenu3_7_3.triggered.connect(lambda: self.run('Doenças neoplásicas 3', 5, "%"));
        self.SubSubMenu3_7_4.triggered.connect(lambda: self.run('Doenças neoplásicas 4', 5, "Óbitos por 100 000 mulheres")); self.SubSubMenu3_7_5.triggered.connect(lambda: self.run('Doenças neoplásicas 5', 5, "Óbitos por 100 000 habitantes"));

        SubMenu3_8 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Doenças cardiovasculares")
        self.SubSubMenu3_8_1 = QAction("Taxa de mortalidade padronizada por doença isquémica cardíaca antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu3_8_2 = QAction("Internamentos pela via verde coronária de episódios agudos de doença isquémica cardíaca", self.iface.mainWindow())
        self.SubSubMenu3_8_3 = QAction("Letalidade intra-hospitalar por doença isquémica cardíaca", self.iface.mainWindow())
        self.SubSubMenu3_8_4 = QAction("Taxa de mortalidade padronizada por doenças cerebrovasculares antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu3_8_5 = QAction("Internamentos pela via verde AVC de episódios de acidente vascular cerebral", self.iface.mainWindow())
        self.SubSubMenu3_8_6 = QAction("Letalidade intra-hospitalar por acidente vascular cerebral", self.iface.mainWindow())
        SubMenu3_8.addAction(self.SubSubMenu3_8_1); SubMenu3_8.addAction(self.SubSubMenu3_8_2); SubMenu3_8.addAction(self.SubSubMenu3_8_3);
        SubMenu3_8.addAction(self.SubSubMenu3_8_4); SubMenu3_8.addAction(self.SubSubMenu3_8_5); SubMenu3_8.addAction(self.SubSubMenu3_8_6);
        self.SubSubMenu3_8_1.triggered.connect(lambda: self.run('Doenças cardiovasculares 1', 5, "Óbitos por 100 000 habitantes")); self.SubSubMenu3_8_2.triggered.connect(lambda: self.run('Doenças cardiovasculares 2', 5, "%")); self.SubSubMenu3_8_3.triggered.connect(lambda: self.run('Doenças cardiovasculares 3', 5, "%"));
        self.SubSubMenu3_8_4.triggered.connect(lambda: self.run('Doenças cardiovasculares 4', 5, "Óbitos por 100 000 habitantes")); self.SubSubMenu3_8_5.triggered.connect(lambda: self.run('Doenças cardiovasculares 5', 5, "%")); self.SubSubMenu3_8_6.triggered.connect(lambda: self.run('Doenças cardiovasculares 6', 5, "%"));

        SubMenu3_9 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Doenças infecciosas")
        self.SubSubMenu3_9_1 = QAction("Taxa de mortalidade padronizada por SIDA antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu3_9_2 = QAction("Incidência de sífilis congénita", self.iface.mainWindow())
        SubMenu3_9.addAction(self.SubSubMenu3_9_1); SubMenu3_9.addAction(self.SubSubMenu3_9_2);
        self.SubSubMenu3_9_1.triggered.connect(lambda: self.run('Doenças infecciosas 1', 5, "Óbitos por 100 000 habitantes")); self.SubSubMenu3_9_2.triggered.connect(lambda: self.run('Doenças infecciosas 2', 5, "/100 000 nados-vivos"));

        SubMenu3_10 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Saúde mental")
        self.SubSubMenu3_10_1 = QAction("Taxa de mortalidade padronizada por suicídio antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu3_10_2 = QAction("Taxa de mortalidade padronizada por doenças atribuíveis ao álcool antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu3_10_3 = QAction("Consumo de álcool", self.iface.mainWindow())
        SubMenu3_10.addAction(self.SubSubMenu3_10_1); SubMenu3_10.addAction(self.SubSubMenu3_10_2); SubMenu3_10.addAction(self.SubSubMenu3_10_3);
        self.SubSubMenu3_10_1.triggered.connect(lambda: self.run('Saúde mental 1', 5, "Óbitos por 100 000 habitantes")); self.SubSubMenu3_10_2.triggered.connect(lambda: self.run('Saúde mental 2', 5, "Óbitos por 100 000 habitantes")); self.SubSubMenu3_10_3.triggered.connect(lambda: self.run('Saúde mental 3', 5, " "));

        SubMenu3_11 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Traumatismos")
        self.SubSubMenu3_11_1 = QAction("Número de mortes por acidentes de viação", self.iface.mainWindow())
        self.SubSubMenu3_11_2 = QAction("Taxa de mortalidade padronizada por acidentes de viação antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu3_11_3 = QAction("Número de mortes por acidentes de viação atribuíveis ao álcool", self.iface.mainWindow())
        self.SubSubMenu3_11_4 = QAction("Taxa bruta de mortalidade por acidentes de viação atribuíveis ao álcool", self.iface.mainWindow())
        self.SubSubMenu3_11_5 = QAction("Taxa de mortalidade padronizada por acidentes laborais", self.iface.mainWindow())
        SubMenu3_11.addAction(self.SubSubMenu3_11_1); SubMenu3_11.addAction(self.SubSubMenu3_11_2); SubMenu3_11.addAction(self.SubSubMenu3_11_3);
        SubMenu3_11.addAction(self.SubSubMenu3_11_4); SubMenu3_11.addAction(self.SubSubMenu3_11_5);
        self.SubSubMenu3_11_1.triggered.connect(lambda: self.run('Traumatismos 1', 5, " ")); self.SubSubMenu3_11_2.triggered.connect(lambda: self.run('Traumatismos 2', 5, "Óbitos por 100 000 habitantes")); self.SubSubMenu3_11_3.triggered.connect(lambda: self.run('Traumatismos 3', 5, " "));
        self.SubSubMenu3_11_4.triggered.connect(lambda: self.run('Traumatismos 4', 5, " ")); self.SubSubMenu3_11_5.triggered.connect(lambda: self.run('Traumatismos 5', 5, "Óbitos por 100 000 habitantes"));

        SubMenu3_12 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Sistema de saúde")
        self.SubSubMenu3_12_1 = QAction("Médicos especialistas por 100 000 habitantes, segundo o local de residência", self.iface.mainWindow())
        self.SubSubMenu3_12_2 = QAction("Médicos de medicina familiar por 100 000 habitantes, segundo o local de residência", self.iface.mainWindow())
        self.SubSubMenu3_12_3 = QAction("Médicos de Saúde Pública por 100 000 habitantes, segundo o local de residência", self.iface.mainWindow())
        self.SubSubMenu3_12_4 = QAction("Dentistas por 100 000 habitantes, segundo o local de residência", self.iface.mainWindow())
        self.SubSubMenu3_12_5 = QAction("Farmacêuticos por 100 000 habitantes, segundo o local de trabalho", self.iface.mainWindow())
        self.SubSubMenu3_12_6 = QAction("Enfermeiros por 100 000 habitantes, segundo o local de trabalho", self.iface.mainWindow())
        self.SubSubMenu3_12_7 = QAction("Consultas com médicos de Medicina Geral e Familiar/Clínica Geral por habitante/ano", self.iface.mainWindow())
        self.SubSubMenu3_12_8 = QAction("Consultas médicas por habitante/ano: CSP + Hospitais", self.iface.mainWindow())
        self.SubSubMenu3_12_9 = QAction("Rácio entre urgências hospitalares e consultas externas", self.iface.mainWindow())
        self.SubSubMenu3_12_10 = QAction("Primeiras consultas no total de consultas externas hospitalares", self.iface.mainWindow())
        self.SubSubMenu3_12_11 = QAction("Número de doentes saídos por cama hospitalar/ano", self.iface.mainWindow())
        self.SubSubMenu3_12_12 = QAction("Demora média em internamento hospitalar", self.iface.mainWindow())
        self.SubSubMenu3_12_13 = QAction("Centros de Saúde que utilizam tableaux de bord para gestão", self.iface.mainWindow())
        SubMenu3_12.addAction(self.SubSubMenu3_12_1); SubMenu3_12.addAction(self.SubSubMenu3_12_2); SubMenu3_12.addAction(self.SubSubMenu3_12_3);
        SubMenu3_12.addAction(self.SubSubMenu3_12_4); SubMenu3_12.addAction(self.SubSubMenu3_12_5); SubMenu3_12.addAction(self.SubSubMenu3_12_6);
        SubMenu3_12.addAction(self.SubSubMenu3_12_7); SubMenu3_12.addAction(self.SubSubMenu3_12_8); SubMenu3_12.addAction(self.SubSubMenu3_12_9);
        SubMenu3_12.addAction(self.SubSubMenu3_12_10); SubMenu3_12.addAction(self.SubSubMenu3_12_11); SubMenu3_12.addAction(self.SubSubMenu3_12_12);
        SubMenu3_12.addAction(self.SubSubMenu3_12_13);
        self.SubSubMenu3_12_1.triggered.connect(lambda: self.run('Sistema de saúde 1', 5, "/100 000 habitantes")); self.SubSubMenu3_12_2.triggered.connect(lambda: self.run('Sistema de saúde 2', 5, "Médicos por 100 000 habitantes")); self.SubSubMenu3_12_3.triggered.connect(lambda: self.run('Sistema de saúde 3', 5, "/100 000 habitantes"));
        self.SubSubMenu3_12_4.triggered.connect(lambda: self.run('Sistema de saúde 4', 5, "/100 000 habitantes")); self.SubSubMenu3_12_5.triggered.connect(lambda: self.run('Sistema de saúde 5', 5, "/100 000 habitantes")); self.SubSubMenu3_12_6.triggered.connect(lambda: self.run('Sistema de saúde 6', 5, "Enfermeiros por 100 000 habitantes"));
        self.SubSubMenu3_12_7.triggered.connect(lambda: self.run('Sistema de saúde 7', 5, " ")); self.SubSubMenu3_12_8.triggered.connect(lambda: self.run('Sistema de saúde 8', 5, " ")); self.SubSubMenu3_12_9.triggered.connect(lambda: self.run('Sistema de saúde 9', 5, " "));
        self.SubSubMenu3_12_10.triggered.connect(lambda: self.run('Sistema de saúde 10', 5, "%")); self.SubSubMenu3_12_11.triggered.connect(lambda: self.run('Sistema de saúde 11', 5, " ")); self.SubSubMenu3_12_12.triggered.connect(lambda: self.run('Sistema de saúde 12', 5, "Dias"));
        self.SubSubMenu3_12_13.triggered.connect(lambda: self.run('Sistema de saúde 13', 5, " "));

        SubMenu3_13 = self.Menu3.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Acessibilidade ao medicamento")
        self.SubSubMenu3_13_1 = QAction("Consumo de medicamentos per capita no mercado total (em euros)", self.iface.mainWindow())
        self.SubSubMenu3_13_2 = QAction("Despesa total em medicamentos no PIB", self.iface.mainWindow())
        self.SubSubMenu3_13_3 = QAction("Despesa em medicamentos na despesa em saúde", self.iface.mainWindow())
        self.SubSubMenu3_13_4 = QAction("Medicamentos genéricos no mercado total de medicamentos", self.iface.mainWindow())
        self.SubSubMenu3_13_5 = QAction("Consumo de medicamentos ansiolíticos, hipnóticos e sedativos e antidepressivos no mercado do SNS, em ambulatório", self.iface.mainWindow())
        self.SubSubMenu3_13_6 = QAction("Consumo de cefalosporinas/consumo total de antibióticos, em ambulatório", self.iface.mainWindow())
        self.SubSubMenu3_13_7 = QAction("Consumo de quinolonas/consumo total de antibióticos, em ambulatório", self.iface.mainWindow())
        self.SubSubMenu3_13_8 = QAction("Medicamentos órfãos utilizados", self.iface.mainWindow())
        SubMenu3_13.addAction(self.SubSubMenu3_13_1); SubMenu3_13.addAction(self.SubSubMenu3_13_2); SubMenu3_13.addAction(self.SubSubMenu3_13_3);
        SubMenu3_13.addAction(self.SubSubMenu3_13_4); SubMenu3_13.addAction(self.SubSubMenu3_13_5); SubMenu3_13.addAction(self.SubSubMenu3_13_6);
        SubMenu3_13.addAction(self.SubSubMenu3_13_7); SubMenu3_13.addAction(self.SubSubMenu3_13_8);
        self.SubSubMenu3_13_1.triggered.connect(lambda: self.run('Acess. ao medicamento 1', 5, "Euros")); self.SubSubMenu3_13_2.triggered.connect(lambda: self.run('Acess. ao medicamento 2', 5, "%")); self.SubSubMenu3_13_3.triggered.connect(lambda: self.run('Acess. ao medicamento 3', 5, "%"));
        self.SubSubMenu3_13_4.triggered.connect(lambda: self.run('Acess. ao medicamento 4', 5, "%")); self.SubSubMenu3_13_5.triggered.connect(lambda: self.run('Acess. ao medicamento 5', 5, "DDD/1000 hab/dia")); self.SubSubMenu3_13_6.triggered.connect(lambda: self.run('Acess. ao medicamento 6', 5, "%"));
        self.SubSubMenu3_13_7.triggered.connect(lambda: self.run('Acess. ao medicamento 7', 5, "%")); self.SubSubMenu3_13_8.triggered.connect(lambda: self.run('Acess. ao medicamento 8', 5, "%"));

        # Quarto Menu
        SubMenu4_1 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa Nacional para a Diabetes")
        self.SubSubMenu4_1_1 = QAction("Incidência de amputações major em diabéticos", self.iface.mainWindow())
        self.SubSubMenu4_1_2 = QAction("Anos de Vida Potenciais Perdidos por diabetes", self.iface.mainWindow())
        self.SubSubMenu4_1_3 = QAction("Internamento por diabetes", self.iface.mainWindow())
        SubMenu4_1.addAction(self.SubSubMenu4_1_1); SubMenu4_1.addAction(self.SubSubMenu4_1_2); SubMenu4_1.addAction(self.SubSubMenu4_1_3);
        self.SubSubMenu4_1_1.triggered.connect(lambda: self.run('PND 1', 5, "/10 000 habitantes")); self.SubSubMenu4_1_2.triggered.connect(lambda: self.run('PND 2', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_1_3.triggered.connect(lambda: self.run('PND 3', 5, "/100 000 hab abaixo dos 70 anos"));

        SubMenu4_2 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa Nacional para a Infeção VIH/SIDA")
        self.SubSubMenu4_2_1 = QAction("Taxa de mortalidade padronizada por SIDA antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_2_2 = QAction("Taxa bruta de mortalidade por HIV/SIDA antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_2_3 = QAction("Anos de Vida Potenciais Perdidos por VIH/SIDA", self.iface.mainWindow())
        SubMenu4_2.addAction(self.SubSubMenu4_2_1); SubMenu4_2.addAction(self.SubSubMenu4_2_2); SubMenu4_2.addAction(self.SubSubMenu4_2_3);
        self.SubSubMenu4_2_1.triggered.connect(lambda: self.run('PNI 1', 5, "/100 000 habitantes")); self.SubSubMenu4_2_2.triggered.connect(lambda: self.run('PNI 2', 5, "/100 000 habitantes")); self.SubSubMenu4_2_3.triggered.connect(lambda: self.run('PNI 3', 5, "/100 000 hab abaixo dos 70 anos"));

        SubMenu4_3 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa Nacional para a Prevenção e Controlo do Tabagismo")
        self.SubSubMenu4_3_1 = QAction("Tabaco - consumo diário (15 a 24 anos)", self.iface.mainWindow())
        self.SubSubMenu4_3_2 = QAction("Tabaco - consumo diário (25 a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu4_3_3 = QAction("Tabaco - consumo diário (45 a 64 anos)", self.iface.mainWindow())
        self.SubSubMenu4_3_4 = QAction("Tabaco - consumo diário (65 a 74 anos)", self.iface.mainWindow())
        self.SubSubMenu4_3_5 = QAction("Anos de Vida Potenciais Perdidos por tumor maligno da traqueia, brônquios e pulmão", self.iface.mainWindow())
        SubMenu4_3.addAction(self.SubSubMenu4_3_1); SubMenu4_3.addAction(self.SubSubMenu4_3_2); SubMenu4_3.addAction(self.SubSubMenu4_3_3);
        SubMenu4_3.addAction(self.SubSubMenu4_3_4); SubMenu4_3.addAction(self.SubSubMenu4_3_5);
        self.SubSubMenu4_3_1.triggered.connect(lambda: self.run('PNPCT 1', 5, "%")); self.SubSubMenu4_3_2.triggered.connect(lambda: self.run('PNPCT 2', 5, "%")); self.SubSubMenu4_3_3.triggered.connect(lambda: self.run('PNPCT 3', 5, "%"));
        self.SubSubMenu4_3_4.triggered.connect(lambda: self.run('PNPCT 4', 5, "%")); self.SubSubMenu4_3_5.triggered.connect(lambda: self.run('PNPCT 5', 5, "/100 000 hab abaixo dos 70 anos"));

        SubMenu4_4 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa Nacional para a Promoção da Alimentação Saudável")
        self.SubSubMenu4_4_1 = QAction("Excesso de peso (18 a 24 anos)", self.iface.mainWindow())
        self.SubSubMenu4_4_2 = QAction("Obesidade (18 a 24 anos)", self.iface.mainWindow())
        self.SubSubMenu4_4_3 = QAction("Excesso de peso (35 a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu4_4_4 = QAction("Excesso de peso (55 a 64 anos)", self.iface.mainWindow())
        self.SubSubMenu4_4_5 = QAction("Obesidade (35 a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu4_4_6 = QAction("Obesidade (55 a 64 anos)", self.iface.mainWindow())
        self.SubSubMenu4_4_7 = QAction("Excesso de peso (65 a 74 anos)", self.iface.mainWindow())
        self.SubSubMenu4_4_8 = QAction("Obesidade (65 a 74 anos)", self.iface.mainWindow())
        SubMenu4_4.addAction(self.SubSubMenu4_4_1); SubMenu4_4.addAction(self.SubSubMenu4_4_2); SubMenu4_4.addAction(self.SubSubMenu4_4_3);
        SubMenu4_4.addAction(self.SubSubMenu4_4_4); SubMenu4_4.addAction(self.SubSubMenu4_4_5); SubMenu4_4.addAction(self.SubSubMenu4_4_6);
        SubMenu4_4.addAction(self.SubSubMenu4_4_7); SubMenu4_4.addAction(self.SubSubMenu4_4_8);
        self.SubSubMenu4_4_1.triggered.connect(lambda: self.run('PNPAS 1', 5, "%")); self.SubSubMenu4_4_2.triggered.connect(lambda: self.run('PNPAS 2', 5, "%")); self.SubSubMenu4_4_3.triggered.connect(lambda: self.run('PNPAS 3', 5, "%"));
        self.SubSubMenu4_4_4.triggered.connect(lambda: self.run('PNPAS 4', 5, "%")); self.SubSubMenu4_4_5.triggered.connect(lambda: self.run('PNPAS 5', 5, "%")); self.SubSubMenu4_4_6.triggered.connect(lambda: self.run('PNPAS 6', 5, "%"));
        self.SubSubMenu4_4_7.triggered.connect(lambda: self.run('PNPAS 7', 5, "%")); self.SubSubMenu4_4_8.triggered.connect(lambda: self.run('PNPAS 8', 5, "%"));

        SubMenu4_5 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa Nacional para a Saúde Mental")
        self.SubSubMenu4_5_1 = QAction("Álcool - consumo nos últimos 12 meses (15  a 24 anos)", self.iface.mainWindow())
        self.SubSubMenu4_5_2 = QAction("Álcool - consumo nos últimos 12 meses (25  a 44 anos)", self.iface.mainWindow())
        self.SubSubMenu4_5_3 = QAction("Álcool - consumo nos últimos 12 meses (45  a 64 anos)", self.iface.mainWindow())
        self.SubSubMenu4_5_4 = QAction("Álcool - consumo nos últimos 12 meses (65  a 74 anos)", self.iface.mainWindow())
        self.SubSubMenu4_5_5 = QAction("Taxa de mortalidade padronizada por suícidio antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_5_6 = QAction("Taxa de mortalidade padronizada por doenças atribuíveis ao álcool antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_5_7 = QAction("Consumo de álcool", self.iface.mainWindow())
        self.SubSubMenu4_5_8 = QAction("Consumo de medicamentos ansiolíticos, hipnóticos e sedativos e antidepressivos no mercado do SNS, em ambulatório", self.iface.mainWindow())
        self.SubSubMenu4_5_9 = QAction("Taxa bruta de mortalidade por suicídio antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_5_10 = QAction("Taxa bruta de mortalidade por doenças atribuíveis ao álcool antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_5_11 = QAction("Internamento por epilepsia e estado de grande mal epilético", self.iface.mainWindow())
        self.SubSubMenu4_5_12 = QAction("Consumo de ansiolíticos, hipnóticos e sedativos no SNS em regime ambulatório", self.iface.mainWindow())
        self.SubSubMenu4_5_13 = QAction("Consumo de antidepressivos no SNS em regime ambulatório", self.iface.mainWindow())
        SubMenu4_5.addAction(self.SubSubMenu4_5_1); SubMenu4_5.addAction(self.SubSubMenu4_5_2); SubMenu4_5.addAction(self.SubSubMenu4_5_3);
        SubMenu4_5.addAction(self.SubSubMenu4_5_4); SubMenu4_5.addAction(self.SubSubMenu4_5_5); SubMenu4_5.addAction(self.SubSubMenu4_5_6);
        SubMenu4_5.addAction(self.SubSubMenu4_5_7); SubMenu4_5.addAction(self.SubSubMenu4_5_8); SubMenu4_5.addAction(self.SubSubMenu4_5_9);
        SubMenu4_5.addAction(self.SubSubMenu4_5_10); SubMenu4_5.addAction(self.SubSubMenu4_5_11); SubMenu4_5.addAction(self.SubSubMenu4_5_12);
        SubMenu4_5.addAction(self.SubSubMenu4_5_13);
        self.SubSubMenu4_5_1.triggered.connect(lambda: self.run('PNSM 1', 5, "%")); self.SubSubMenu4_5_2.triggered.connect(lambda: self.run('PNSM 2', 5, "%")); self.SubSubMenu4_5_3.triggered.connect(lambda: self.run('PNSM 3', 5, "%"));
        self.SubSubMenu4_5_4.triggered.connect(lambda: self.run('PNSM 4', 5, "%")); self.SubSubMenu4_5_5.triggered.connect(lambda: self.run('PNSM 5', 5, "/100 000 habitantes")); self.SubSubMenu4_5_6.triggered.connect(lambda: self.run('PNSM 6', 5, "/100 000 habitantes"));
        self.SubSubMenu4_5_7.triggered.connect(lambda: self.run('PNSM 7', 5, "")); self.SubSubMenu4_5_8.triggered.connect(lambda: self.run('PNSM 8', 5, "DDD/1000 hab/dia")); self.SubSubMenu4_5_9.triggered.connect(lambda: self.run('PNSM 9', 5, "/100 000 habitantes"));
        self.SubSubMenu4_5_10.triggered.connect(lambda: self.run('PNSM 10', 5, "/100 000 habitantes")); self.SubSubMenu4_5_11.triggered.connect(lambda: self.run('PNSM 11', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_5_12.triggered.connect(lambda: self.run('PNSM 12', 5, "DDD/1000 hab/dia"));
        self.SubSubMenu4_5_13.triggered.connect(lambda: self.run('PNSM 13', 5, "DDD/1000 hab/dia"));

        SubMenu4_6 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa Nacional para as Doenças Oncológicas")
        self.SubSubMenu4_6_1 = QAction("Taxa de rastreio do cancro da mama feminina", self.iface.mainWindow())
        self.SubSubMenu4_6_2 = QAction("Taxa de mortalidade padronizada por cancro da mama feminina antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_6_3 = QAction("Taxa de rastreio do cancro do colo do útero", self.iface.mainWindow())
        self.SubSubMenu4_6_4 = QAction("Taxa de mortalidade padronizada por cancro do colo do útero antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_6_5 = QAction("Taxa de mortalidade padronizada por cancro do cólon e reto antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_6_6 = QAction("Taxa bruta de mortalidade de cancro da mama feminino antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_6_7 = QAction("Taxa bruta de mortalidade por cancro do colo do útero antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_6_8 = QAction("Taxa bruta de mortalidade por cancro do cólon e reto antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_6_9 = QAction("Anos de Vida Potenciais Perdidos por tumor maligno do colo do útero", self.iface.mainWindow())
        self.SubSubMenu4_6_10 = QAction("Anos de Vida Potenciais Perdidos por tumor maligno da mama feminina", self.iface.mainWindow())
        self.SubSubMenu4_6_11 = QAction("Anos de Vida Potenciais Perdidos por tumor maligno do cólon, reto e ânus", self.iface.mainWindow())
        self.SubSubMenu4_6_12 = QAction("Taxa de mortalidade padronizada por tumores malignos por 100 000 habitantes", self.iface.mainWindow())
        self.SubSubMenu4_6_13 = QAction("Taxa de mortalidade padronizada por tumor maligno do estômago por 100 000 habitantes", self.iface.mainWindow())
        self.SubSubMenu4_6_14 = QAction("Taxa de mortalidade padronizada por tumor maligno do cólon, reto e ânus por 100 000 habitantes", self.iface.mainWindow())
        self.SubSubMenu4_6_15 = QAction("Taxa de mortalidade padronizada por tumor maligno da traqueia, brônquios e pulmão por 100 000 habitantes", self.iface.mainWindow())
        self.SubSubMenu4_6_16 = QAction("Taxa de mortalidade padronizada por tumor maligno da mama feminina por 100 000 mulheres", self.iface.mainWindow())
        self.SubSubMenu4_6_17 = QAction("Taxa de mortalidade padronizada por tumor maligno do colo do útero por 100 000 mulheres", self.iface.mainWindow())
        self.SubSubMenu4_6_18 = QAction("Taxa de mortalidade padronizada por tumor maligno da próstata por 100 000 habitantes", self.iface.mainWindow())
        self.SubSubMenu4_6_19 = QAction("Taxa de mortalidade padronizada por tumor maligno da bexiga por 100 000 habitantes", self.iface.mainWindow())
        SubMenu4_6.addAction(self.SubSubMenu4_6_1); SubMenu4_6.addAction(self.SubSubMenu4_6_2); SubMenu4_6.addAction(self.SubSubMenu4_6_3);
        SubMenu4_6.addAction(self.SubSubMenu4_6_4); SubMenu4_6.addAction(self.SubSubMenu4_6_5); SubMenu4_6.addAction(self.SubSubMenu4_6_6);
        SubMenu4_6.addAction(self.SubSubMenu4_6_7); SubMenu4_6.addAction(self.SubSubMenu4_6_8); SubMenu4_6.addAction(self.SubSubMenu4_6_9);
        SubMenu4_6.addAction(self.SubSubMenu4_6_10); SubMenu4_6.addAction(self.SubSubMenu4_6_11); SubMenu4_6.addAction(self.SubSubMenu4_6_12);
        SubMenu4_6.addAction(self.SubSubMenu4_6_13); SubMenu4_6.addAction(self.SubSubMenu4_6_14); SubMenu4_6.addAction(self.SubSubMenu4_6_15);
        SubMenu4_6.addAction(self.SubSubMenu4_6_16); SubMenu4_6.addAction(self.SubSubMenu4_6_17); SubMenu4_6.addAction(self.SubSubMenu4_6_18);
        SubMenu4_6.addAction(self.SubSubMenu4_6_19);
        self.SubSubMenu4_6_1.triggered.connect(lambda: self.run('PNDO 1', 5, "%")); self.SubSubMenu4_6_2.triggered.connect(lambda: self.run('PNDO 2', 5, "/100 000 mulheres")); self.SubSubMenu4_6_3.triggered.connect(lambda: self.run('PNDO 3', 5, "%"));
        self.SubSubMenu4_6_4.triggered.connect(lambda: self.run('PNDO 4', 5, "/100 000 mulheres")); self.SubSubMenu4_6_5.triggered.connect(lambda: self.run('PNDO 5', 5, "/100 000 habitantes")); self.SubSubMenu4_6_6.triggered.connect(lambda: self.run('PNDO 6', 5, "/100 000 mulheres"));
        self.SubSubMenu4_6_7.triggered.connect(lambda: self.run('PNDO 7', 5, "/100 000 mulheres")); self.SubSubMenu4_6_8.triggered.connect(lambda: self.run('PNDO 8', 5, "/100 000 habitantes")); self.SubSubMenu4_6_9.triggered.connect(lambda: self.run('PNDO 9', 5, "/100 000 hab abaixo dos 70 anos"));
        self.SubSubMenu4_6_10.triggered.connect(lambda: self.run('PNDO 10', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_6_11.triggered.connect(lambda: self.run('PNDO 11', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_6_12.triggered.connect(lambda: self.run('PNDO 12', 5, "/100 000 habitantes"));
        self.SubSubMenu4_6_13.triggered.connect(lambda: self.run('PNDO 13', 5, "/100 000 habitantes")); self.SubSubMenu4_6_14.triggered.connect(lambda: self.run('PNDO 14', 5, "/100 000 habitantes")); self.SubSubMenu4_6_15.triggered.connect(lambda: self.run('PNDO 15', 5, "/100 000 habitantes"));
        self.SubSubMenu4_6_16.triggered.connect(lambda: self.run('PNDO 16', 5, "/100 000 mulheres")); self.SubSubMenu4_6_17.triggered.connect(lambda: self.run('PNDO 17', 5, "/100 000 mulheres")); self.SubSubMenu4_6_18.triggered.connect(lambda: self.run('PNDO 18', 5, "/100 000 homens"));
        self.SubSubMenu4_6_19.triggered.connect(lambda: self.run('PNDO 19', 5, "/100 000 habitantes"));

        SubMenu4_7 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa Nacional para as Doenças Respiratórias")
        self.SubSubMenu4_7_1 = QAction("Anos de Vida Potenciais Perdidos por pneumonia (/100000 hab. abaixo dos 70 anos)", self.iface.mainWindow())
        self.SubSubMenu4_7_2 = QAction("Internamento por asma", self.iface.mainWindow())
        self.SubSubMenu4_7_3 = QAction("Internamento por Doença Pulmonar Obstrutiva Crónica", self.iface.mainWindow())
        self.SubSubMenu4_7_4 = QAction("Anos potenciais de vida perdidos por doença pulmonar obstrutiva crónica por 100000 habitantes", self.iface.mainWindow())
        self.SubSubMenu4_7_5 = QAction("Anos potenciais de vida perdidos por doenças respiratórias por 100000 habitantes", self.iface.mainWindow())
        SubMenu4_7.addAction(self.SubSubMenu4_7_1); SubMenu4_7.addAction(self.SubSubMenu4_7_2); SubMenu4_7.addAction(self.SubSubMenu4_7_3);
        SubMenu4_7.addAction(self.SubSubMenu4_7_4); SubMenu4_7.addAction(self.SubSubMenu4_7_5);
        self.SubSubMenu4_7_1.triggered.connect(lambda: self.run('PNDR 1', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_7_2.triggered.connect(lambda: self.run('PNDR 2', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_7_3.triggered.connect(lambda: self.run('PNDR 3', 5, "/100 000 hab abaixo dos 70 anos"));
        self.SubSubMenu4_7_4.triggered.connect(lambda: self.run('PNDR 4', 5, "/100 000 habitantes")); self.SubSubMenu4_7_5.triggered.connect(lambda: self.run('PNDR 5', 5, "/100 000 habitantes"));

        SubMenu4_8 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa Nacional para as Doenças Cérebro-cardiovasculares")
        self.SubSubMenu4_8_1 = QAction("Taxa de mortalidade padronizada por doença isquémica cardíaca antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_8_2 = QAction("Internamentos pela via verde coronária de episódios agudos de doença isquémica cardíaca", self.iface.mainWindow())
        self.SubSubMenu4_8_3 = QAction("Letalidade intra-hospitalar por doença isquémica cardíaca", self.iface.mainWindow())
        self.SubSubMenu4_8_4 = QAction("Taxa de mortalidade padronizada por doenças cerebrovasculares antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_8_5 = QAction("Internamentos pela via verde AVC de episódios de acidente vascular cerebral", self.iface.mainWindow())
        self.SubSubMenu4_8_6 = QAction("Letalidade intra-hospitalar por acidente vascular cerebral", self.iface.mainWindow())
        self.SubSubMenu4_8_7 = QAction("Taxa bruta de mortalidade por doença isquémica cardíaca antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_8_8 = QAction("Incidência de AVC", self.iface.mainWindow())
        self.SubSubMenu4_8_9 = QAction("Incidência de AVC antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_8_10 = QAction("Incidência da doença cardíaca antes dos 65 anos", self.iface.mainWindow())
        self.SubSubMenu4_8_11 = QAction("Anos de Vida Potenciais Perdidos por doenças cerebrovasculares", self.iface.mainWindow())
        self.SubSubMenu4_8_12 = QAction("Internamento por insuficiência cardíaca", self.iface.mainWindow())
        self.SubSubMenu4_8_13 = QAction("Taxa padronizada de internamento por angina de peito (/100000 hab. abaixo dos 70 anos)", self.iface.mainWindow())
        self.SubSubMenu4_8_14 = QAction("Internamento por hipertensão arterial", self.iface.mainWindow())
        self.SubSubMenu4_8_15 = QAction("Taxa bruta de mortalidade por doenças cerebrovasculares antes dos 65 anos", self.iface.mainWindow())
        SubMenu4_8.addAction(self.SubSubMenu4_8_1); SubMenu4_8.addAction(self.SubSubMenu4_8_2); SubMenu4_8.addAction(self.SubSubMenu4_8_3);
        SubMenu4_8.addAction(self.SubSubMenu4_8_4); SubMenu4_8.addAction(self.SubSubMenu4_8_5); SubMenu4_8.addAction(self.SubSubMenu4_8_6);
        SubMenu4_8.addAction(self.SubSubMenu4_8_7); SubMenu4_8.addAction(self.SubSubMenu4_8_8); SubMenu4_8.addAction(self.SubSubMenu4_8_9);
        SubMenu4_8.addAction(self.SubSubMenu4_8_10); SubMenu4_8.addAction(self.SubSubMenu4_8_11); SubMenu4_8.addAction(self.SubSubMenu4_8_12);
        SubMenu4_8.addAction(self.SubSubMenu4_8_13); SubMenu4_8.addAction(self.SubSubMenu4_8_14); SubMenu4_8.addAction(self.SubSubMenu4_8_15);
        self.SubSubMenu4_8_1.triggered.connect(lambda: self.run('PNDCC 1', 5, "/100 000 habitantes")); self.SubSubMenu4_8_2.triggered.connect(lambda: self.run('PNDCC 2', 5, "%")); self.SubSubMenu4_8_3.triggered.connect(lambda: self.run('PNDCC 3', 5, "%"));
        self.SubSubMenu4_8_4.triggered.connect(lambda: self.run('PNDCC 4', 5, "/100 000 habitantes")); self.SubSubMenu4_8_5.triggered.connect(lambda: self.run('PNDCC 5', 5, "%")); self.SubSubMenu4_8_6.triggered.connect(lambda: self.run('PNDCC 6', 5, "%"));
        self.SubSubMenu4_8_7.triggered.connect(lambda: self.run('PNDCC 7', 5, "/100 000 habitantes")); self.SubSubMenu4_8_8.triggered.connect(lambda: self.run('PNDCC 8', 5, "/10 000 habitantes")); self.SubSubMenu4_8_9.triggered.connect(lambda: self.run('PNDCC 9', 5, "/10 000 habitantes"));
        self.SubSubMenu4_8_10.triggered.connect(lambda: self.run('PNDCC 10', 5, "/10 000 habitantes")); self.SubSubMenu4_8_11.triggered.connect(lambda: self.run('PNDCC 11', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_8_12.triggered.connect(lambda: self.run('PNDCC 12', 5, "/100 000 hab abaixo dos 70 anos"));
        self.SubSubMenu4_8_13.triggered.connect(lambda: self.run('PNDCC 13', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_8_14.triggered.connect(lambda: self.run('PNDCC 14', 5, "/100 000 hab abaixo dos 70 anos")); self.SubSubMenu4_8_15.triggered.connect(lambda: self.run('PNDCC 15', 5, "/100 000 habitantes"));

        SubMenu4_9 = self.Menu4.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Programa de Prevenção e Controlo de Infeções e de Resistência aos Antimicrobianos")
        self.SubSubMenu4_9_1 = QAction("Consumo de cefalosporinas/consumo total de antibióticos, em ambulatório", self.iface.mainWindow())
        self.SubSubMenu4_9_2 = QAction("Consumo de quinolonas/consumo total de antibióticos, em ambulatório", self.iface.mainWindow())
        self.SubSubMenu4_9_3 = QAction("Consumo de antibacterianos no SNS em regime ambulatório", self.iface.mainWindow())
        SubMenu4_9.addAction(self.SubSubMenu4_9_1); SubMenu4_9.addAction(self.SubSubMenu4_9_2); SubMenu4_9.addAction(self.SubSubMenu4_9_3);
        self.SubSubMenu4_9_1.triggered.connect(lambda: self.run('PPCIRA 1', 5, "%")); self.SubSubMenu4_9_2.triggered.connect(lambda: self.run('PPCIRA 2', 5, "%")); self.SubSubMenu4_9_3.triggered.connect(lambda: self.run('PPCIRA 3', 5, "DDD/1000 hab/dia"));

        # Quinto Menu
        self.SubMenu5_1 = QAction("Utentes inscritos", self.iface.mainWindow())
        self.SubMenu5_2 = QAction("Utentes utilizadores", self.iface.mainWindow())
        self.SubMenu5_3 = QAction("Taxa de utilização", self.iface.mainWindow())
        self.SubMenu5_4 = QAction("Proporção de população residente feminina", self.iface.mainWindow())
        self.SubMenu5_5 = QAction("Proporção de população residente com pelo menos a escolaridade obrigatória", self.iface.mainWindow())
        self.SubMenu5_6 = QAction("Índice de dependência total", self.iface.mainWindow())
        self.SubMenu5_7 = QAction("Índice de envelhecimento", self.iface.mainWindow())
        self.SubMenu5_8 = QAction("Densidade populacional", self.iface.mainWindow())
        self.SubMenu5_9 = QAction("Índice de poder de compra", self.iface.mainWindow())
        self.SubMenu5_10 = QAction("Taxa de Mortalidade Padronizada por todas as causas", self.iface.mainWindow())
        self.SubMenu5_11 = QAction("Taxa de anos potenciais de vida perdidos", self.iface.mainWindow())
        self.SubMenu5_12 = QAction("Taxa bruta de mortalidade de cancro da mama feminino antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_13 = QAction("Taxa bruta de mortalidade por cancro do colo do útero antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_14 = QAction("Taxa bruta de mortalidade por cancro do cólon e reto antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_15 = QAction("Taxa bruta de mortalidade por doença isquémica cardíaca antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_16 = QAction("Taxa bruta de mortalidade por doenças cerebrovasculares antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_17 = QAction("Taxa bruta de mortalidade por HIV/SIDA antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_18 = QAction("Taxa bruta de mortalidade por suicídio antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_19 = QAction("Taxa bruta de mortalidade por doenças atribuíveis ao álcool antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_20 = QAction("Incidência de amputações major em diabéticos", self.iface.mainWindow())
        self.SubMenu5_21 = QAction("Recém nascidos de termo com baixo peso", self.iface.mainWindow())
        self.SubMenu5_22 = QAction("Incidência de AVC", self.iface.mainWindow())
        self.SubMenu5_23 = QAction("Incidência de AVC antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_24 = QAction("Incidência da doença cardíaca antes dos 65 anos", self.iface.mainWindow())
        self.SubMenu5_25 = QAction("Índice de Utilização Hospitalar Cirúrgica", self.iface.mainWindow())
        self.SubMenu5_26 = QAction("Índice de Utilização Hospitalar Médica", self.iface.mainWindow())
        self.SubMenu5_27 = QAction("Índice de Utilização de Internamento Hospitalar", self.iface.mainWindow())
        self.SubMenu5_28 = QAction("Índice de Utilização de Urgências Hospitalares", self.iface.mainWindow())
        self.SubMenu5_29 = QAction("Índice de necessidades em saúde", self.iface.mainWindow())
        Menu5.addAction(self.SubMenu5_1); Menu5.addAction(self.SubMenu5_2); Menu5.addAction(self.SubMenu5_3);
        Menu5.addAction(self.SubMenu5_4); Menu5.addAction(self.SubMenu5_5); Menu5.addAction(self.SubMenu5_6);
        Menu5.addAction(self.SubMenu5_7); Menu5.addAction(self.SubMenu5_8); Menu5.addAction(self.SubMenu5_9);
        Menu5.addAction(self.SubMenu5_10); Menu5.addAction(self.SubMenu5_11); Menu5.addAction(self.SubMenu5_12);
        Menu5.addAction(self.SubMenu5_13); Menu5.addAction(self.SubMenu5_14); Menu5.addAction(self.SubMenu5_15);
        Menu5.addAction(self.SubMenu5_16); Menu5.addAction(self.SubMenu5_17); Menu5.addAction(self.SubMenu5_18);
        Menu5.addAction(self.SubMenu5_19); Menu5.addAction(self.SubMenu5_20); Menu5.addAction(self.SubMenu5_21);
        Menu5.addAction(self.SubMenu5_22); Menu5.addAction(self.SubMenu5_23); Menu5.addAction(self.SubMenu5_24);
        Menu5.addAction(self.SubMenu5_25); Menu5.addAction(self.SubMenu5_26); Menu5.addAction(self.SubMenu5_27);
        Menu5.addAction(self.SubMenu5_28); Menu5.addAction(self.SubMenu5_29);
        self.SubMenu5_1.triggered.connect(lambda: self.run('Ind. Carac. ACES 1', 5, " ")); self.SubMenu5_2.triggered.connect(lambda: self.run('Ind. Carac. ACES 2', 5, " ")); self.SubMenu5_3.triggered.connect(lambda: self.run('Ind. Carac. ACES 3', 5, "%"));
        self.SubMenu5_4.triggered.connect(lambda: self.run('Ind. Carac. ACES 4', 5, "%")); self.SubMenu5_5.triggered.connect(lambda: self.run('Ind. Carac. ACES 5', 5, "%")); self.SubMenu5_6.triggered.connect(lambda: self.run('Ind. Carac. ACES 6', 5, " "));
        self.SubMenu5_7.triggered.connect(lambda: self.run('Ind. Carac. ACES 7', 5, " ")); self.SubMenu5_8.triggered.connect(lambda: self.run('Ind. Carac. ACES 8', 5, "Habitante/Km2")); self.SubMenu5_9.triggered.connect(lambda: self.run('Ind. Carac. ACES 9', 5, " "));
        self.SubMenu5_10.triggered.connect(lambda: self.run('Ind. Carac. ACES 10', 5, "Óbitos por 100 000 habitantes")); self.SubMenu5_11.triggered.connect(lambda: self.run('Ind. Carac. ACES 11', 5, "/100 000 habitantes")); self.SubMenu5_12.triggered.connect(lambda: self.run('Ind. Carac. ACES 12', 5, "/100 000 mulheres"));
        self.SubMenu5_13.triggered.connect(lambda: self.run('Ind. Carac. ACES 13', 5, "/100 000 mulheres")); self.SubMenu5_14.triggered.connect(lambda: self.run('Ind. Carac. ACES 14', 5, "/100 000 habitantes")); self.SubMenu5_15.triggered.connect(lambda: self.run('Ind. Carac. ACES 15', 5, "/100 000 habitantes"));
        self.SubMenu5_16.triggered.connect(lambda: self.run('Ind. Carac. ACES 16', 5, "/100 000 habitantes")); self.SubMenu5_17.triggered.connect(lambda: self.run('Ind. Carac. ACES 17', 5, "/100 000 habitantes")); self.SubMenu5_18.triggered.connect(lambda: self.run('Ind. Carac. ACES 18', 5, "/100 000 habitantes"));
        self.SubMenu5_19.triggered.connect(lambda: self.run('Ind. Carac. ACES 19', 5, "/100 000 habitantes")); self.SubMenu5_20.triggered.connect(lambda: self.run('Ind. Carac. ACES 20', 5, "/10 000 habitantes")); self.SubMenu5_21.triggered.connect(lambda: self.run('Ind. Carac. ACES 21', 5, "‰"));
        self.SubMenu5_22.triggered.connect(lambda: self.run('Ind. Carac. ACES 22', 5, "/10 000 habitantes")); self.SubMenu5_23.triggered.connect(lambda: self.run('Ind. Carac. ACES 23', 5, "/10 000 habitantes")); self.SubMenu5_24.triggered.connect(lambda: self.run('Ind. Carac. ACES 24', 5, "/10 000 habitantes"));
        self.SubMenu5_25.triggered.connect(lambda: self.run('Ind. Carac. ACES 25', 5, "")); self.SubMenu5_26.triggered.connect(lambda: self.run('Ind. Carac. ACES 26', 5, "")); self.SubMenu5_27.triggered.connect(lambda: self.run('Ind. Carac. ACES 27', 5, ""));
        self.SubMenu5_28.triggered.connect(lambda: self.run('Ind. Carac. ACES 28', 5, "")); self.SubMenu5_29.triggered.connect(lambda: self.run('Ind. Carac. ACES 29', 5, ""));

        # Sexto Menu
        SubMenu6_1 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Consultas Médicas Hospitalares")
        self.SubSubMenu6_1_1 = QAction("Nº Consultas Médicas Total", self.iface.mainWindow())
        self.SubSubMenu6_1_2 = QAction("Nº Primeiras Consultas", self.iface.mainWindow())
        self.SubSubMenu6_1_3 = QAction("Nº Consultas Subsequentes", self.iface.mainWindow())
        SubMenu6_1.addAction(self.SubSubMenu6_1_1); SubMenu6_1.addAction(self.SubSubMenu6_1_2); SubMenu6_1.addAction(self.SubSubMenu6_1_3);
        self.SubSubMenu6_1_1.triggered.connect(lambda: self.run('CMH 1', 5, "")); self.SubSubMenu6_1_2.triggered.connect(lambda: self.run('CMH 2', 5, "")); self.SubSubMenu6_1_3.triggered.connect(lambda: self.run('CMH 3', 5, ""));

        SubMenu6_2 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Lotação Hospitalar para Doentes Agudos")
        self.SubSubMenu6_2_1 = QAction("Lotação", self.iface.mainWindow())
        SubMenu6_2.addAction(self.SubSubMenu6_2_1);
        self.SubSubMenu6_2_1.triggered.connect(lambda: self.run('LHDA 1', 5, ""));

        SubMenu6_3 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Prazo Médio de Pagamento a Fornecedores")
        self.SubSubMenu6_3_1 = QAction("Prazo Médio de Pagamento", self.iface.mainWindow())
        self.SubSubMenu6_3_2 = QAction("1as Consultas Telemedicina", self.iface.mainWindow())
        SubMenu6_3.addAction(self.SubSubMenu6_3_1); SubMenu6_3.addAction(self.SubSubMenu6_3_2);
        self.SubSubMenu6_3_1.triggered.connect(lambda: self.run('PMPF 1', 5, "")); self.SubSubMenu6_3_2.triggered.connect(lambda: self.run('PMPF 2', 5, ""));

        SubMenu6_4 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Dispositivos Médicos por Nomenclatura Portuguesa do Dispositivo Médico")
        self.SubSubMenu6_4_1 = QAction("Nº Dispositivos Médicos", self.iface.mainWindow())
        SubMenu6_4.addAction(self.SubSubMenu6_4_1);
        self.SubSubMenu6_4_1.triggered.connect(lambda: self.run('DMNPDM 1', 5, ""));

        SubMenu6_5 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Fraturas da Anca (Cirurgias nas primeiras 48h)")
        self.SubSubMenu6_5_1 = QAction("Nº Episódios utentes idade sup 65 anos com diag princ 820 com cir realiz nas 1as 48h após admissão", self.iface.mainWindow())
        self.SubSubMenu6_5_2 = QAction("Nº Episódios utentes idade sup 65 anos com diag princ 820 com cirurgia realizada", self.iface.mainWindow())
        SubMenu6_5.addAction(self.SubSubMenu6_5_1); SubMenu6_5.addAction(self.SubSubMenu6_5_2);
        self.SubSubMenu6_5_1.triggered.connect(lambda: self.run('Fraturas da Anca 1', 5, "")); self.SubSubMenu6_5_2.triggered.connect(lambda: self.run('Fraturas da Anca 2', 5, ""));

        SubMenu6_6 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Inscritos em LIC dentro do TMRG")
        self.SubSubMenu6_6_1 = QAction("Nº Doentes Inscritos dentro do TMRG SIGIC", self.iface.mainWindow())
        self.SubSubMenu6_6_2 = QAction("Nº Doentes Inscritos SIGIC", self.iface.mainWindow())
        SubMenu6_6.addAction(self.SubSubMenu6_6_1); SubMenu6_6.addAction(self.SubSubMenu6_6_2);
        self.SubSubMenu6_6_1.triggered.connect(lambda: self.run('Ins. LIC TMRG 1', 5, "")); self.SubSubMenu6_6_2.triggered.connect(lambda: self.run('Ins. LIC TMRG 2', 5, ""));

        SubMenu6_7 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Reinternamento em 30 dias")
        self.SubSubMenu6_7_1 = QAction("Nº Reinternamentos nos 30 dias posteriores à Alta do Doente (anos civis diferentes)", self.iface.mainWindow())
        self.SubSubMenu6_7_2 = QAction("Total de Internamentos com Alta no Período", self.iface.mainWindow())
        SubMenu6_7.addAction(self.SubSubMenu6_7_1); SubMenu6_7.addAction(self.SubSubMenu6_7_2);
        self.SubSubMenu6_7_1.triggered.connect(lambda: self.run('Rein. 30 dias 1', 5, "")); self.SubSubMenu6_7_2.triggered.connect(lambda: self.run('Rein. 30 dias 2', 5, ""));

        SubMenu6_8 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Partos e Cesarianas nos Cuidados Hospitalares")
        self.SubSubMenu6_8_1 = QAction("Nº Total de Partos", self.iface.mainWindow())
        self.SubSubMenu6_8_2 = QAction("Nº Cesarianas", self.iface.mainWindow())
        SubMenu6_8.addAction(self.SubSubMenu6_8_1); SubMenu6_8.addAction(self.SubSubMenu6_8_2);
        self.SubSubMenu6_8_1.triggered.connect(lambda: self.run('PCCH 1', 5, "")); self.SubSubMenu6_8_2.triggered.connect(lambda: self.run('PCCH 2', 5, ""));

        SubMenu6_9 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Atividade de Internamento Hospitalar")
        self.SubSubMenu6_9_1 = QAction("Doentes Saídos", self.iface.mainWindow())
        self.SubSubMenu6_9_2 = QAction("Dias de Internamento", self.iface.mainWindow())
        SubMenu6_9.addAction(self.SubSubMenu6_9_1); SubMenu6_9.addAction(self.SubSubMenu6_9_2);
        self.SubSubMenu6_9_1.triggered.connect(lambda: self.run('AIH 1', 5, "")); self.SubSubMenu6_9_2.triggered.connect(lambda: self.run('AIH 2', 5, ""));

        SubMenu6_10 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Intervenções Cirúrgicas nos Cuidados Hospitalares")
        self.SubSubMenu6_10_1 = QAction("Nº Intervenções Cirúrgicas Programadas", self.iface.mainWindow())
        self.SubSubMenu6_10_2 = QAction("Nº Intervenções Cirúrgicas Convencionais", self.iface.mainWindow())
        self.SubSubMenu6_10_3 = QAction("Nº Intervenções Cirúrgicas de Ambulatório", self.iface.mainWindow())
        self.SubSubMenu6_10_4 = QAction("Nº Intervenções Cirúrgicas Urgentes", self.iface.mainWindow())
        SubMenu6_10.addAction(self.SubSubMenu6_10_1); SubMenu6_10.addAction(self.SubSubMenu6_10_2); SubMenu6_10.addAction(self.SubSubMenu6_10_3);
        SubMenu6_10.addAction(self.SubSubMenu6_10_4);
        self.SubSubMenu6_10_1.triggered.connect(lambda: self.run('ICCH 1', 5, "")); self.SubSubMenu6_10_2.triggered.connect(lambda: self.run('ICCH 2', 5, "")); self.SubSubMenu6_10_3.triggered.connect(lambda: self.run('ICCH 3', 5, ""));
        self.SubSubMenu6_10_4.triggered.connect(lambda: self.run('ICCH 4', 5, ""));

        SubMenu6_11 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Atendimentos em Urgência Hospitalar por Triagem de Manchester")
        self.SubSubMenu6_11_1 = QAction("Nº Atendimentos em Urgência SU Triagem Manchester - Vermelha", self.iface.mainWindow())
        self.SubSubMenu6_11_2 = QAction("Nº Atendimentos em Urgência SU Triagem Manchester - Laranja", self.iface.mainWindow())
        self.SubSubMenu6_11_3 = QAction("Nº Atendimentos em Urgência SU Triagem Manchester - Amarela", self.iface.mainWindow())
        self.SubSubMenu6_11_4 = QAction("Nº Atendimentos em Urgência SU Triagem Manchester - Verde", self.iface.mainWindow())
        self.SubSubMenu6_11_5 = QAction("Nº Atendimentos em Urgência SU Triagem Manchester - Azul", self.iface.mainWindow())
        self.SubSubMenu6_11_6 = QAction("Nº Atendimentos em Urgência SU Triagem Manchester - Branca", self.iface.mainWindow())
        self.SubSubMenu6_11_7 = QAction("Nº Atendimentos s\ Triagem Manchester", self.iface.mainWindow())
        SubMenu6_11.addAction(self.SubSubMenu6_11_1); SubMenu6_11.addAction(self.SubSubMenu6_11_2); SubMenu6_11.addAction(self.SubSubMenu6_11_3);
        SubMenu6_11.addAction(self.SubSubMenu6_11_4); SubMenu6_11.addAction(self.SubSubMenu6_11_5); SubMenu6_11.addAction(self.SubSubMenu6_11_6);
        SubMenu6_11.addAction(self.SubSubMenu6_11_7)
        self.SubSubMenu6_11_1.triggered.connect(lambda: self.run('AUHTM 1', 5, "")); self.SubSubMenu6_11_2.triggered.connect(lambda: self.run('AUHTM 2', 5, "")); self.SubSubMenu6_11_3.triggered.connect(lambda: self.run('AUHTM 3', 5, ""));
        self.SubSubMenu6_11_4.triggered.connect(lambda: self.run('AUHTM 4', 5, "")); self.SubSubMenu6_11_5.triggered.connect(lambda: self.run('AUHTM 5', 5, "")); self.SubSubMenu6_11_6.triggered.connect(lambda: self.run('AUHTM 6', 5, ""));
        self.SubSubMenu6_11_7.triggered.connect(lambda: self.run('AUHTM 7', 5, ""))

        SubMenu6_12 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Atendimentos por Tipo de Urgência Hospitalar")
        self.SubSubMenu6_12_1 = QAction("Urgências Geral", self.iface.mainWindow())
        self.SubSubMenu6_12_2 = QAction("Urgências Pediátricas", self.iface.mainWindow())
        self.SubSubMenu6_12_3 = QAction("Urgências Obstetricia", self.iface.mainWindow())
        self.SubSubMenu6_12_4 = QAction("Urgências Psiquiátrica", self.iface.mainWindow())
        self.SubSubMenu6_12_5 = QAction("Total Urgências", self.iface.mainWindow())
        SubMenu6_12.addAction(self.SubSubMenu6_12_1); SubMenu6_12.addAction(self.SubSubMenu6_12_2); SubMenu6_12.addAction(self.SubSubMenu6_12_3);
        SubMenu6_12.addAction(self.SubSubMenu6_12_4); SubMenu6_12.addAction(self.SubSubMenu6_12_5);
        self.SubSubMenu6_12_1.triggered.connect(lambda: self.run('ATUH 1', 5, "")); self.SubSubMenu6_12_2.triggered.connect(lambda: self.run('ATUH 2', 5, "")); self.SubSubMenu6_12_3.triggered.connect(lambda: self.run('ATUH 3', 5, ""));
        self.SubSubMenu6_12_4.triggered.connect(lambda: self.run('ATUH 4', 5, "")); self.SubSubMenu6_12_5.triggered.connect(lambda: self.run('ATUH 5', 5, ""));

        SubMenu6_13 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Consultas em Telemedicina")
        self.SubSubMenu6_13_1 = QAction("1as Consultas Telemedicina", self.iface.mainWindow())
        self.SubSubMenu6_13_2 = QAction("Consultas Subsequentes Telemedicina", self.iface.mainWindow())
        self.SubSubMenu6_13_3 = QAction("Total Consultas Telemedicina", self.iface.mainWindow())
        SubMenu6_13.addAction(self.SubSubMenu6_13_1); SubMenu6_13.addAction(self.SubSubMenu6_13_2); SubMenu6_13.addAction(self.SubSubMenu6_13_3);
        self.SubSubMenu6_13_1.triggered.connect(lambda: self.run('Cons. Telemedicina 1', 5, "")); self.SubSubMenu6_13_2.triggered.connect(lambda: self.run('Cons. Telemedicina 2', 5, "")); self.SubSubMenu6_13_3.triggered.connect(lambda: self.run('Cons. Telemedicina 3', 5, ""));

        SubMenu6_14 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Primeiras Consultas em Tempo Adequado")
        self.SubSubMenu6_14_1 = QAction("Nº Primeiras CE prestadas dentro do TMRG", self.iface.mainWindow())
        self.SubSubMenu6_14_2 = QAction("Nº Primeiras CE realizadas com registo no CTH", self.iface.mainWindow())
        SubMenu6_14.addAction(self.SubSubMenu6_14_1); SubMenu6_14.addAction(self.SubSubMenu6_14_2);
        self.SubSubMenu6_14_1.triggered.connect(lambda: self.run('PCTA 1', 5, "")); self.SubSubMenu6_14_2.triggered.connect(lambda: self.run('PCTA 2', 5, ""));

        SubMenu6_15 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Cirurgias em Ambulatório")
        self.SubSubMenu6_15_1 = QAction("Nº Episódios Cirúrgicos Ambulat com Procedimentos Ambulatorizáveis", self.iface.mainWindow())
        self.SubSubMenu6_15_2 = QAction("Nº Episódios Cirúrgicos Ambulatórios e Internamentos", self.iface.mainWindow())
        SubMenu6_15.addAction(self.SubSubMenu6_15_1); SubMenu6_15.addAction(self.SubSubMenu6_15_2);
        self.SubSubMenu6_15_1.triggered.connect(lambda: self.run('Circ. Amb. 1', 5, "")); self.SubSubMenu6_15_2.triggered.connect(lambda: self.run('Circ. Amb. 2', 5, ""));

        SubMenu6_16 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Taxa de Ocupação Hospitalar")
        self.SubSubMenu6_16_1 = QAction("Nº Dias de Internamento", self.iface.mainWindow())
        self.SubSubMenu6_16_2 = QAction("Lotação Praticada", self.iface.mainWindow())
        SubMenu6_16.addAction(self.SubSubMenu6_16_1); SubMenu6_16.addAction(self.SubSubMenu6_16_2);
        self.SubSubMenu6_16_1.triggered.connect(lambda: self.run('TOH 1', 5, "")); self.SubSubMenu6_16_2.triggered.connect(lambda: self.run('TOH 2', 5, ""));

        SubMenu6_17 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Demora Média antes da Cirurgia")
        self.SubSubMenu6_17_1 = QAction("Nº Dias até cirurgia em episódios de GDH cirúrgicos programados", self.iface.mainWindow())
        self.SubSubMenu6_17_2 = QAction("Nº Episódios em GDH cirúrgicos de internamento programados - com exclusões", self.iface.mainWindow())
        SubMenu6_17.addAction(self.SubSubMenu6_17_1); SubMenu6_17.addAction(self.SubSubMenu6_17_2);
        self.SubSubMenu6_17_1.triggered.connect(lambda: self.run('DMAC 1', 5, "")); self.SubSubMenu6_17_2.triggered.connect(lambda: self.run('DMAC 2', 5, ""));

        SubMenu6_18 = self.Menu6.addMenu(QIcon(':/plugins/indicadores_geosaude/plusicon.png'), "Episódios de Internamento com Dispositivos Médicos")
        self.SubSubMenu6_18_1 = QAction("Nº Episódios de Internamento", self.iface.mainWindow())
        self.SubSubMenu6_18_2 = QAction("Nº Episódios de Internamento com Dispositivos Médicos", self.iface.mainWindow())
        SubMenu6_18.addAction(self.SubSubMenu6_18_1); SubMenu6_18.addAction(self.SubSubMenu6_18_2);
        self.SubSubMenu6_18_1.triggered.connect(lambda: self.run('EIDP 1', 5, "")); self.SubSubMenu6_18_2.triggered.connect(lambda: self.run('EIDP 2', 5, ""));

        # Menu
        self.toolButton = QToolButton()
        self.toolButton.setIcon(QIcon(':/plugins/indicadores_geosaude/plugin_icon.png'))
        self.toolButton.setMenu(self.Menu)
        self.toolButton.setPopupMode(QToolButton.InstantPopup)
        self.toolbar.addWidget(self.toolButton)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Indicadores Geosaude'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self,table_name,num_classes,label):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            year = self.dlg.comboBox.currentText()
            sex = self.dlg.comboBox_2.currentText()
            da = self.dlg.comboBox_3.currentText()
            temp = self.dlg.comboBox_4.currentText()
            uri = QgsDataSourceUri()
            # set host name, port, database name, username and password
            uri.setConnection("localhost", "5432", "Geosaude", "postgres", "password")
            if temp == 'Ano':
                uri.setDataSource("public", table_name + " " + str(year) + " " + str(sex) + " " + str(da), "geom")
                layer = QgsVectorLayer(uri.uri(False), table_name + " " + str(year) + " " + str(sex) + " " + str(da),"postgres")
            else:
                if 'Mês' in temp:
                    t = temp.replace('º Mês','M')
                    uri.setDataSource("public",table_name + " " + str(year) + " " + str(sex) + " " + str(da) + " " + str(t),"geom")
                    layer = QgsVectorLayer(uri.uri(False),table_name + " " + str(year) + " " + str(sex) + " " + str(da) + " " + str(t), "postgres")
                elif 'Quadrimestre' in temp:
                    t = temp.replace('º Quadrimestre', 'Q')
                    uri.setDataSource("public",table_name + " " + str(year) + " " + str(sex) + " " + str(da) + " " + str(t),"geom")
                    layer = QgsVectorLayer(uri.uri(False),table_name + " " + str(year) + " " + str(sex) + " " + str(da) + " " + str(t), "postgres")
                elif 'Semestre' in temp:
                    t = temp.replace('º Semestre', 'S')
                    uri.setDataSource("public",table_name + " " + str(year) + " " + str(sex) + " " + str(da) + " " + str(t),"geom")
                    layer = QgsVectorLayer(uri.uri(False),table_name + " " + str(year) + " " + str(sex) + " " + str(da) + " " + str(t), "postgres")
                elif 'Trimestre' in temp:
                    t = temp.replace('º Trimestre', 'T')
                    uri.setDataSource("public",table_name + " " + str(year) + " " + str(sex) + " " + str(da) + " " + str(t),"geom")
                    layer = QgsVectorLayer(uri.uri(False),table_name + " " + str(year) + " " + str(sex) + " " + str(da) + " " + str(t), "postgres")
            if layer.isValid():
                graduated = QgsGraduatedSymbolRenderer()
                graduated.setClassAttribute("value")
                format = QgsRendererRangeLabelFormat()
                template = "%1 - %2" + " " + label
                precision = 2
                format.setFormat(template)
                format.setPrecision(precision)
                graduated.setLabelFormat(format)
                graduated.setMode(QgsGraduatedSymbolRenderer.EqualInterval)
                graduated.updateClasses(layer, QgsGraduatedSymbolRenderer.EqualInterval, num_classes)
                color_ramp = QgsCptCityColorRamp("jjg/polarity/RdYlGn", "", True, True)
                graduated.updateColorRamp(color_ramp)
                layer.setRenderer(graduated)
                QgsProject.instance().addMapLayer(layer)
            else:
                QMessageBox.information(self.iface.mainWindow(),self.tr(u'Indicadores Geosaude'),self.tr(u'Indicador inexistente'))









